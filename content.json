[{"title":"","date":"2025-09-18T12:17:01.185Z","path":"2025/09/18/ros2/基础/编程基础补充/","text":"补充一些基础编程知识1.每次修改代码文件后，需要重新colcon build构建再运行。 2.面向对象编程都可以创建类，类是对事物的封装。 3.对于继承：python： (1)”from 父类所在文件 import 父类”; (2)class 子类(父类): ; (3)”.super().init(父类构造需要的参数)” :调用父类的init方法。c++: (1)class 子类 : public 父类 【例如：Class PersonNode : public rclcpp::Node】; (2)子类(const 参数类型 &amp;参数1,…):父类(const 参数类型 &amp;父类构造所需参数); [注意]： ​ (1)创建共享指针，”auto 节点名字 &#x3D; std::make_shared&lt;类名&gt;(“节点名”)” 注：使用共享指针需要头文件(2)RCLCPP_INFO(节点名字-&gt;get_logger(),”要打印出来的文字信息”); 注意这个函数的参数形式。 (3)传入时格式为”string”,输出时为”%s”,则可以在输出时加上”.c_str()进行强制转换”。【c_str():将str类型转换为c语言格式的字符串】 (4)CPP文件中，有时候构造函数时会在传入参数前加上”const”（加在类型前）和”&amp;”（加在变量名前），加上前者是希望用户不要对传入的数据进行修改，加上后者(称为拷贝指针)是为了避免不必要的数据拷贝，以提高运行效率。","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:43:02.063Z","path":"2025/09/18/记录杂七杂八小问题/实现Ubuntu与主机之间复制粘贴/","text":"1.方法一：虚拟机顶部工具栏点击”虚拟机设置”-&gt;”选项”-&gt;”客户机隔离”勾选，再次启动Ubuntu。 2.方法二：使用Ubuntu命令 在终端中依次运行： 123sudo su- //进入管理员模式sudo apt-get install open-vm-tools open-vm-tools-desktop //安装命令vmware-user //开启服务 最后，重启虚拟机就可以实现跨平台复制粘贴。 3.方法三：（永久开启该服务） 编写service配置文件 1234567891011# /etc/systemd/system/vmware-user.service [Unit] Description=开机启动一次vmware-user After=network.target [Service] Type=oneshot ExecStart=vmware-user [Install] WantedBy=multi-user.target 重新加载systemd配置 1systemctl daemon-reload 设置开机自启动 1systemctl enable vmware-user 重启虚拟机后基本成功","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:26:06.144Z","path":"2025/09/18/ros2/工具/ros_git进阶/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:22:22.046Z","path":"2025/09/18/ros2/工具/ros_TF相关命令及原理探究/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:22:22.046Z","path":"2025/09/18/ros2/工具/ros_TF关系的查询/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:22:22.046Z","path":"2025/09/18/ros2/工具/ros_数据记录工具ros2 bag/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:22:22.046Z","path":"2025/09/18/ros2/工具/ros_静态TF的发布/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:22:22.046Z","path":"2025/09/18/ros2/工具/ros_常用可视化工具rqt&Rviz/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:22:22.046Z","path":"2025/09/18/ros2/工具/ros_动态TF的发布/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:19:04.986Z","path":"2025/09/18/ros2/服务通信/ros_launch进阶使用/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:19:04.986Z","path":"2025/09/18/ros2/服务通信/ros_使用launch启动多个节点/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:17:29.266Z","path":"2025/09/18/ros2/服务通信/ros_服务通信实训_人脸识别/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:08:33.609Z","path":"2025/09/18/ros2/话题通信/ros_git入门/","text":"git命令基础入门1.克隆仓库 12git clone 地址cd repo 2.创建新分支 1git checkout -b new-feature 3.暂存文件：将修改过的文件添加到暂存区 12git add 文件名git add . # 添加所有修改的文件 4.提交更改：将暂存区的更改提交到本地仓库 1git commit -m &quot;附加信息&quot; 5.拉取最新更改：在推送本地之前，最好从远程仓库拉取最新的更改，以免冲突 12git pull origin maingit pull origin new-feature #添加在新的分支上 6.合并更改：在PR审核过合并后，可以将远程仓库的主分支合并在本地分支 123git checkout maingit pull origin maingit merge new-feature 7.删除分支 12git branch -d new-featuregit push origin --delete new-feature [接下来是基础但较有用的功能] git status：查看仓库当前状态，显示有变更的文件。 git diff：比较文件的不同，即暂存区和工作区的差异。 git difftool：使用外部工具比较文件差异。 git reset：回退版本（即把暂存区的文件撤出）。 git rm：将文件从暂存区和工作区删除。 git mv：移动或者重命名工作区文件。 git notes：添加注释。 git checkout：分支切换。|git switch：更清晰的分支切换。 git restore：恢复或撤销文件更改。 git show：显示git对象详细信息。 git log：查看历史提交记录。 git blame ：以列表形式查看指定文件的历史修改记录。 关于远程操作： git remove：远程仓库操作。 git fetch：从远程获得代码。 git pull：下载远程代码并合并。 git push：上传远程代码并合并。 git submodule：管理包含其他Git仓库的项目。","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:08:33.609Z","path":"2025/09/18/ros2/话题通信/ros_话题通信实战_订阅pose实现闭环控制/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:08:33.609Z","path":"2025/09/18/ros2/话题通信/ros_话题通信实战_自定义实现实时状态信息查询小工具/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:08:33.609Z","path":"2025/09/18/ros2/服务通信/ros_服务通信介绍/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:06:17.974Z","path":"2025/09/18/ros2/话题通信/ros_话题通信实战_订阅小说并合成语音/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:04:13.571Z","path":"2025/09/18/ros2/话题通信/ros_话题通信/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:04:13.571Z","path":"2025/09/18/ros2/话题通信/ros_话题通信实战-通过话题发布小说/","text":"","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:02:53.902Z","path":"2025/09/18/ros2/基础/ros_多线程与回调函数(Python版)/","text":"多线程与回调函数┗|｀O′|┛ 嗷~🍖 ~w(ﾟДﾟ)w 回调函数：把统计函数当作参数传递给下载函数，下载完成自己第一时间调用。 “threading.get_ident()”：可以得到线程编号(python中)；”this_thread.get_id()”：可以得到线程编号(c++中) “echo “文字” “&gt; 文件名,可生成对应文件,并将文字写入。 “python3 -m http.server”：启动python3的内置服务器。 一个程序默认是在一个线程中完成的，如果需要多个线程并行，则需要使用thread。 与python中的多线程不同，c++中的线程一旦创建就立刻运行，并阻塞当前进程，所以需要用”thread.detach()”将其与当前进程进行分离。","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:02:53.902Z","path":"2025/09/18/ros2/基础/ros_常用的C++特性/","text":"有用的C++特性1.auto 节点名字 &#x3D; std::make_shared&lt;类名&gt;(“节点名字”) node的类型是自动推导的。 2.智能指针&#x2F;共享指针:专治占着内存不使用的程序。[注] :(1) 指针.use_count()：得到指针引用次数。 (2) 指针.get():得到指向的内存地址。​ (3) 指针-&gt;c_str():得到指针指向内存地址数据。​ (4) 对象.函数(参数):直接通过对象访问成员 指针-&gt;函数(参数):通过指向对象的指针访问成员。​ 具体使用哪一个要看“访问者是对象本身，还是指向对象的指针”。​ (5) CPP的”colcon build”会添加到环境变量，所以没有source也能运行。(但最好还是build一下好) 💥3.lambda表达式(放在函数里面用)即换个语法写函数：capture list-(parameter list)&gt;return type{function body} 注:常用[&amp;](输入列表)-&gt;void{函数体}，其中void表示不返回 捕获列表可以为空，也可以使用默认捕获模式&amp;或者&#x3D;表示按引用或者值捕获所有外部变量。 💥4.函数包装器：统一自由函数、成员方法和Lambda函数 (1)对于自由函数：std::function&lt;函数返回值(函数传入参数)&gt; 给该函数一个新名字 &#x3D; 原自由函数名; (2)对于lambda函数: 同自由函数; (3)对于成员方法【较复杂】： std::function&lt;方法返回值(方法传入参数)&gt; 给该函数一个新名字 &#x3D; std::bind(类对应函数的指针&#x2F;模板地址,对象的指针,参数数量占位符); or std::function&lt;方法返回值(方法传入参数)&gt; 给该函数一个新名字 &#x3D; std::bind(类对应创造的对象,类中要调用的方法,参数数量占位符); 注：关于绑定bind很好解决了调用成员函数必须要先创造一个成员函数的问题，它直接绑定了一个对象。","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:00:44.489Z","path":"2025/09/18/ros2/基础/ros_使用功能包组织节点/","text":"使用功能包组织节点💖基本流程：命令行创建功能包-&gt;在功能包中创建节点-&gt;在set.up文件中进行配置-&gt;在xml文件中添加依赖信息（但是如果创建功能包时添加了–dependencies就不需要这步）-&gt;colcon build进行构建-&gt;source install&#x2F;setup.bash-&gt;“ros2 run 包名 文件名”运行文件 使用”ros2 pkg create demo_python_pkg –build-type ament_python –license Apache-2.0”可以创建Python功能包，如果不指定build-type，默认为C++类型功能包。【有时候还会有–dependencies等选项】 可以在第二级demo_python_pkg目录下新建节点文件。 在功能包中注册节点。[即在setup.py文件中添加节点函数在那一层] 打开功能包中的xml文件添加依赖信息。[添加“rclpy”] “colcon build”:功能包的构建。[支持软链接，会把原来的包复制一份，然后执行复制的那份，即在install里面的python3.12&#x2F;site-packages中最里面那个python_node.py] [注]：colcon build一般在工作空间的根目录下进行，可以使用“colcon build-packages-select 包名”对特定的包进行构建。 “source install&#x2F;setup.bash”：生成环境变量。[setup.bash脚本用于修改环境变量] [补]:”ros2 功能包名 节点名”：运行节点 7.export PYTHONPATH&#x3D;新位置:$PYTHONPATH”:临时修改参数的环境变量。[使用6就可以不用这个方法] 8.修改环境变量的几种方法： 手动修改，即使用第7点 自动修改，即使用第6点 9.如果希望节点能以”ros2 run 包名 节点名”的形式运行，创建类的时候需要对rclcpp&#x2F;rclpy中的Node进行继承。 关于C++和Python继承Node后，在main函数中的代码主要框架： C++： 1234567int main(int argc, char* argv)&#123; rclcpp::init(argc,argv); ... rclcpp::spin(创建的节点); rclcpp::shutdown(); return 0;&#125; Python： 12345def main: rclpy.init() ... rclpy.spin(节点) rclpy.shutdown()","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:00:44.489Z","path":"2025/09/18/ros2/基础/ros_编写第一个C++节点&Python节点/","text":"ros中编写C++节点 当项目较小时，可以在终端中使用”g++ cpp文件名”，得到一个可执行文件，再使用“.&#x2F;可执行文件名”运行程序。 当项目较大时，使用CMake得到生成指令。过程：编写一个CMakeList.txt文件(文件名不能改)-&gt;使用cmake指令转化为Makefile文件-&gt;使用make指令转化为exe文件。 ros中编写Python节点1.直接编写后就可以使用”run 文件名”进行运行。","categories":[],"tags":[]},{"title":"","date":"2025-09-18T10:00:01.996Z","path":"2025/09/18/ros2/基础/ros_Linux环境变量/","text":"Linux基础之环境变量 ros2 命令就是通过环境变量来寻找功能包的。 printenv:可以用来打印环境变量。 printenv | grep 筛选内容：可以查找所选取的环境变量。 当出现报错“Package xx not found”时，可以检查AMENT_PREFIX_PATH下的lib是否有这个包。 AMENT_PREFIX_PATH（路径）的初始值是由默认脚本设置的，该默认脚本位置为:~&#x2F;.bashrc[该文件为隐藏文件]。 使用 ls -a可以查看当前目录下的隐藏文件。 “source &#x2F;opt&#x2F;ros&#x2F;jazzy&#x2F;setup.bash”语句用于设置环境变量。后面经常会用”source install&#x2F;setup.bash”来将colcon build生成的可执行文件写入Install文件中。","categories":[],"tags":[]},{"title":"基本格式","date":"2025-09-18T08:28:11.787Z","path":"2025/09/18/基础相关/format/","text":"","categories":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"}],"tags":[]},{"title":"Hello Hexo","date":"2025-09-18T08:02:00.000Z","path":"2025/09/18/基础相关/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"Typora的基础使用方法","date":"2025-09-18T07:39:00.000Z","path":"2025/09/18/基础相关/Typora_use/","text":"注：在文件最前面输入”[“TOC”]”，自动生成可跳转的文件目录 [TOC] 一.关于标题这是二级标题笔记：关于快捷键【但我的电脑不知道为啥用不了】 1.Ctrl+数字1-6对应将选中文本调节至对应级别的标题。 2.Ctrl+0可以快速将选中的文本调成普通文本。 3.Ctrl+加号&#x2F;减号对标题级别进行调整。 4.“#”数量控制字体级别，注意”#”与标题间有一个空格。 二.关于换行1.“Shift”+“Enter”可以进行比”Shift”更小的换行。 2.“分割线”：“—”按回车或者”***”按回车。 三.文字显示1.关于字体（1）粗体：用一对双星号包裹 e.g：这是粗体 （2）剔除线：用一对双飘号包裹 e.g:这是剔除线 （3）下划线：用一对u标签(html)包裹 e.g:这是下划线 （4）斜体：用一对单星号包裹 e.g:这是斜体 （5）高亮：用一对双等号包裹 e.g：&#x3D;&#x3D;这是高亮&#x3D;&#x3D; 快捷键：(按双数次取消效果) 加粗：Ctrl+B删除线：Shift+Alt+5下划线：Ctrl+u斜体：Ctrl+i 注：反斜杠+星：解决星号不显示的问题 * 2.上下标(1)一对”^”：表示上标。 x^2^ (2)一对”“：表示下标。 H2~O 四.列表1.无序列表（1）同级序号 ctrl+Shift+”]”：进入序列，两次回车退出序列。 （2）子集序列:Ctrl+”]”：列表右缩进。 这是一级序列 这是二级序列 又变一级 2.有序列表（1）同级序号 ctrl+Shift+”[“：进入序列，两次回车退出序列。 (2) 子集序列：子集序列:Ctrl+”]”：列表右缩进。 3.任务列表 :无序列表符+”[ ]” 五.区块显示 :”英文箭头加回车”。 六.代码显示1.行内代码 int a =2;:用一对“&#96;”包裹。 2.代码块：Ctrl+Shift+K 123int a = 2;int b =3; 1#include &lt;iostream&gt; 七.链接哔哩哔哩：Ctrl+K [一.关于标题](# 一.关于标题)：关于文件内标题跳转，前面括号写显示内容，后面括号写入跳转标题(记得加上对应格式)；跳转的时候Ctrl+点击。 八.脚注文字^1 ：“[”+”^”想要脚注的文字+”]” 上面的实现：“[”+”^”想要脚注的文字+”]”:解释说明。 ​ 注意：上下想要脚注的文字的文字需要一致才能有脚注； ​ 冒号要用英文格式的； ​ “&lt;”br”&gt;”：可以实现回车。 九.图片插入![不显示只给写文件的人提醒的一段文字](图片路径 “图片标题”) 还可以拖拽进行添加图片 十.表格快捷键：Ctrl+T id name score 23 张三 99 3 李四 100 十一.表情符号:happy: 、:cry: 两个冒号间加对应英文；（win+. ：可以快速打开表情面板） 十二.数学公式输入$$x^2+(y+1)^2&#x3D;5$$","categories":[{"name":"Typora","slug":"Typora","permalink":"http://example.com/categories/Typora/"}],"tags":[{"name":"Typora","slug":"Typora","permalink":"http://example.com/tags/Typora/"},{"name":"basic-Usage","slug":"basic-Usage","permalink":"http://example.com/tags/basic-Usage/"}]}]
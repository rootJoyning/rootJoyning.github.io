<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>在此恭候夷陵老祖的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-09-24T14:26:23.305Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>joyning</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2025/09/24/%E8%AE%B0%E5%BD%95%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E5%B0%8F%E9%97%AE%E9%A2%98/%E5%85%B3%E4%BA%8Eyaml%E6%96%87%E4%BB%B6%E7%9A%84%E7%BC%96%E5%86%99%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%9D%91%E7%82%B9/"/>
    <id>http://example.com/2025/09/24/%E8%AE%B0%E5%BD%95%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E5%B0%8F%E9%97%AE%E9%A2%98/%E5%85%B3%E4%BA%8Eyaml%E6%96%87%E4%BB%B6%E7%9A%84%E7%BC%96%E5%86%99%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%9D%91%E7%82%B9/</id>
    <published>2025-09-24T14:23:39.976Z</published>
    <updated>2025-09-24T14:26:23.305Z</updated>
    
    <content type="html"><![CDATA[<ol><li>开头第一行需要：—，对，就是三个横杠隔开</li><li>每一行后面都不要偷偷加空格</li><li>最后一行需要顶头换行</li><li>可以使用”yamllint yaml文件的路径”，可以查看yaml文件是否编写正确。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;开头第一行需要：—，对，就是三个横杠隔开&lt;/li&gt;
&lt;li&gt;每一行后面都不要偷偷加空格&lt;/li&gt;
&lt;li&gt;最后一行需要顶头换行&lt;/li&gt;
&lt;li&gt;可以使用”yamllint yaml文件的路径”，可以查看yaml文件是否编写正确。&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ros_参数</title>
    <link href="http://example.com/2025/09/24/ros2/ros_%E5%8F%82%E6%95%B0/"/>
    <id>http://example.com/2025/09/24/ros2/ros_%E5%8F%82%E6%95%B0/</id>
    <published>2025-09-23T16:00:00.000Z</published>
    <updated>2025-09-24T11:21:55.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ros-参数"><a href="#ros-参数" class="headerlink" title="ros_参数"></a>ros_参数</h1><ol><li>特点：全局共享字典、由键值对组成、可实现动态监控</li><li>查看&#x2F;修改参数常用命令：</li></ol><ul><li>ros2 param describe 节点 参数：获得参数描述</li><li>ros2 param get 节点 参数：获得参数当前值</li><li>ros2 param set 节点 参数 参数值：设置参数值</li><li>ros2 param dump 节点 &gt;&gt; 文件名(一般以.yaml结尾)：将节点中所有参数写到指定文件中(这样可以在文件中直接对参数进行批量修改)</li><li>ros2 param load 节点 文件名 ：读取指定文件中的参数</li></ul><ol start="3"><li>使用代码创建类继承rclpy节点，实现参数创建、读取、修改：</li></ol><ul><li><p>declare_parameter(‘参数名’,’参数值’)：创建一个参数，并设置参数的默认值</p></li><li><p>get_parameter(‘参数名’).get_parameter_value().string_value：获得字符串类型的参数值</p></li><li><p>get_parameter_value()：获取参数值的具体信息【？？？感觉这个函数和上面那个一样】</p></li><li><p>rclpy.parameter.Parameter(‘参数名’,值的类型,’新的参数值’)：重新设置参数的值【值的类型，e.g:字符串类型：rclpy.Parameter.Type.STRING】</p></li><li><p>set_parameters(新的键值对)：给参数设置新的值</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ros-参数&quot;&gt;&lt;a href=&quot;#ros-参数&quot; class=&quot;headerlink&quot; title=&quot;ros_参数&quot;&gt;&lt;/a&gt;ros_参数&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;特点：全局共享字典、由键值对组成、可实现动态监控&lt;/li&gt;
&lt;li&gt;查看&amp;#x2F;修改参数常用</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="parameter" scheme="http://example.com/tags/parameter/"/>
    
  </entry>
  
  <entry>
    <title>ros_动作通信</title>
    <link href="http://example.com/2025/09/24/ros2/ros_%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/"/>
    <id>http://example.com/2025/09/24/ros2/ros_%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/</id>
    <published>2025-09-23T16:00:00.000Z</published>
    <updated>2025-09-26T10:09:12.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ros-动作通信"><a href="#ros-动作通信" class="headerlink" title="ros_动作通信"></a>ros_动作通信</h1><ol><li>动作通信是一种应用层的通信机制，基于客户端&#x2F;服务器(c&#x2F;s)模型。实际上动作通信是由两个服务通信和一个话题通信构成的。如下为动作通信结构：</li></ol><p><img src="N:/qq_massage/Screenshot_20250924_134955_tv.danmaku.bilibilihd.jpg" alt="Screenshot_20250924_134955_tv.danmaku.bilibilihd"></p><ol start="2"><li>动作通信有一个持续时间，并且在持续时间内一直有Feedback反馈。</li></ol><p><img src="N:/qq_massage/Screenshot_20250924_135734_tv.danmaku.bilibilihd.jpg" alt="Screenshot_20250924_135734_tv.danmaku.bilibilihd"></p><ol start="3"><li>接口.Goal()：创建一个目标消息</li><li>接口.Result()：创建一个结果消息</li><li>接口.Feedback()：创建一个动作反馈消息</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ros-动作通信&quot;&gt;&lt;a href=&quot;#ros-动作通信&quot; class=&quot;headerlink&quot; title=&quot;ros_动作通信&quot;&gt;&lt;/a&gt;ros_动作通信&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;动作通信是一种应用层的通信机制，基于客户端&amp;#x2F;服务器(c&amp;#x2F;s)</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="action_communication" scheme="http://example.com/tags/action-communication/"/>
    
  </entry>
  
  <entry>
    <title>ros_DDS机器人的神经网络</title>
    <link href="http://example.com/2025/09/24/ros2/ros_DDS%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2025/09/24/ros2/ros_DDS%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
    <published>2025-09-23T16:00:00.000Z</published>
    <updated>2025-09-24T11:54:15.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DDS机器人的神经网络"><a href="#DDS机器人的神经网络" class="headerlink" title="DDS机器人的神经网络"></a>DDS机器人的神经网络</h1><ol><li>常用通信模型</li></ol><ul><li><p>点对点模型</p></li><li><p>Broker模式</p></li><li><p>广播模式</p></li><li><p>数据为中心模式</p></li></ul><p>![4d89ea5a88ab54b0112ffebab46e3751_720](N:&#x2F;qq_massage&#x2F;Tencent Files&#x2F;2454428604&#x2F;nt_qq&#x2F;nt_data&#x2F;Pic&#x2F;2025-09&#x2F;Thumb&#x2F;4d89ea5a88ab54b0112ffebab46e3751_720.jpg)</p><ol start="2"><li>DDS，即<strong>数据分发服务</strong>，专门为实时系统设计的<strong>数据分发&#x2F;订阅标准</strong>。DDS强调以数据为中心，提供丰富的服务质量策略(QoS)，以保障数据进行高效、实时、灵活地分发，可满足各种分布式实时通信应用需求。</li></ol><p>![470955445bacc91c498c2637bb5c6fc4_720](N:&#x2F;qq_massage&#x2F;Tencent Files&#x2F;2454428604&#x2F;nt_qq&#x2F;nt_data&#x2F;Pic&#x2F;2025-09&#x2F;Thumb&#x2F;470955445bacc91c498c2637bb5c6fc4_720.jpg)</p><p>【注意】：如果DDS中qos通信名称相同，但传输模式不同，依旧不可以进行通信。</p><ol start="3"><li><p>“ros2 topic info 话题名称 –verbose”可以查到更为详尽的信息。</p><p>如下为QoS的一些配置</p><p><img src="/../../../../AppData/Roaming/Typora/typora-user-images/image-20250924195338170.png" alt="image-20250924195338170"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DDS机器人的神经网络&quot;&gt;&lt;a href=&quot;#DDS机器人的神经网络&quot; class=&quot;headerlink&quot; title=&quot;DDS机器人的神经网络&quot;&gt;&lt;/a&gt;DDS机器人的神经网络&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;常用通信模型&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="DDS" scheme="http://example.com/tags/DDS/"/>
    
  </entry>
  
  <entry>
    <title>ros_通信接口【总结版】</title>
    <link href="http://example.com/2025/09/24/ros2/%E5%9F%BA%E7%A1%80/ros_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E3%80%90%E6%80%BB%E7%BB%93%E7%89%88%E3%80%91/"/>
    <id>http://example.com/2025/09/24/ros2/%E5%9F%BA%E7%A1%80/ros_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3%E3%80%90%E6%80%BB%E7%BB%93%E7%89%88%E3%80%91/</id>
    <published>2025-09-23T16:00:00.000Z</published>
    <updated>2025-09-24T05:27:38.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ros-通信接口【总结版】"><a href="#ros-通信接口【总结版】" class="headerlink" title="ros_通信接口【总结版】"></a>ros_通信接口【总结版】</h1><ol><li>关于话题通信（单向传输，发布者一直反馈结果）、服务通信（一问一答，服务端请求一次反馈一次）和动作通信的框架图</li></ol><p><img src="N:/qq_massage/Screenshot_20250924_125825_tv.danmaku.bilibilihd.jpg" alt="Screenshot_20250924_125825_tv.danmaku.bilibilihd"></p><ol start="2"><li>不同通信方式对应的接口文件</li></ol><ul><li>话题—-&gt;.msg文件【由通信数据构成】</li><li>服务—&gt;.srv文件【由请求数据和应答数据两部分构成】</li><li>动作—&gt;.action文件【由目标、结果和反馈三部分构成】</li></ul><ol start="3"><li>查看常用的通信接口</li></ol><ul><li>话题通信&#x2F;服务通信&#x2F;动作通信接口具体定义查看：ros2 interface show 消息接口</li><li>查看某功能包定义的所有通信接口：ros2 interface package 功能包名</li></ul><p>**[注]**：</p><ul><li>定义好通信接口文件后，需要去CMakeList.txt和package.xml文件中进行配置。</li><li>调用接口文件时，要在文件开始时引用接口文件。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ros-通信接口【总结版】&quot;&gt;&lt;a href=&quot;#ros-通信接口【总结版】&quot; class=&quot;headerlink&quot; title=&quot;ros_通信接口【总结版】&quot;&gt;&lt;/a&gt;ros_通信接口【总结版】&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;关于话题通信（单向传输，发布者一直反馈结</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="foundation" scheme="http://example.com/tags/foundation/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://example.com/2025/09/23/%E5%9F%BA%E7%A1%80%E7%9B%B8%E5%85%B3/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2025/09/23/%E5%9F%BA%E7%A1%80%E7%9B%B8%E5%85%B3/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2025-09-22T16:00:00.000Z</published>
    <updated>2025-09-23T02:23:32.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><ol><li>pwd：查看当前路径</li><li>ls：查看当前目录下的文件 |ls -a：查看当前目录下的文件(包括隐藏文件)</li><li>mkdir 文件夹名：创建文件夹</li><li>cd 路径：进入某个路径</li><li>touch 文件名：创建文件</li><li>rm 文件名：删除文件</li><li>rm -r 文件夹：删除文件夹</li><li>sudo apt install 应用名：安装应用</li><li>关于ros2 node的可选项：</li></ol><p>​<img src="/../../../../AppData/Roaming/Typora/typora-user-images/image-20250923101657983.png" alt="image-20250923101657983"></p><ol start="10"><li>关于ros2 topic的可选项：</li></ol><p><img src="/../../../../AppData/Roaming/Typora/typora-user-images/image-20250923101802147.png" alt="image-20250923101802147"></p><ol start="11"><li>关于ros2 service的可选项：</li></ol><p><img src="/../../../../AppData/Roaming/Typora/typora-user-images/image-20250923101913366.png" alt="image-20250923101913366"></p><ol start="12"><li>关于ros2 bag的可选项：</li></ol><p><img src="/../../../../AppData/Roaming/Typora/typora-user-images/image-20250923102331173.png" alt="image-20250923102331173"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;Linux常用命令&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;pwd：查看当前路径&lt;/li&gt;
&lt;li&gt;ls：查看当前目录下的文件 |l</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="basic-Usage" scheme="http://example.com/tags/basic-Usage/"/>
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux中相机驱动节点的复用</title>
    <link href="http://example.com/2025/09/23/%E8%AE%B0%E5%BD%95%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E5%B0%8F%E9%97%AE%E9%A2%98/Linux%E4%B8%AD%E7%9B%B8%E6%9C%BA%E9%A9%B1%E5%8A%A8%E8%8A%82%E7%82%B9%E7%9A%84%E5%A4%8D%E7%94%A8/"/>
    <id>http://example.com/2025/09/23/%E8%AE%B0%E5%BD%95%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E5%B0%8F%E9%97%AE%E9%A2%98/Linux%E4%B8%AD%E7%9B%B8%E6%9C%BA%E9%A9%B1%E5%8A%A8%E8%8A%82%E7%82%B9%E7%9A%84%E5%A4%8D%E7%94%A8/</id>
    <published>2025-09-22T16:00:00.000Z</published>
    <updated>2025-09-23T13:07:15.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux中相机驱动节点的复用"><a href="#Linux中相机驱动节点的复用" class="headerlink" title="Linux中相机驱动节点的复用"></a>Linux中相机驱动节点的复用</h1><p>在终端中输入如下命令：</p><ul><li>sudo apt install ros-${ROS_DISTRO}-usb-cam # 安装相机的标准驱动</li><li>ros2 run usb_cam usb_cam_node_exe #使用ros下面一个标准的功能包来驱动</li><li>此时再运行需要启动相机的节点</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux中相机驱动节点的复用&quot;&gt;&lt;a href=&quot;#Linux中相机驱动节点的复用&quot; class=&quot;headerlink&quot; title=&quot;Linux中相机驱动节点的复用&quot;&gt;&lt;/a&gt;Linux中相机驱动节点的复用&lt;/h1&gt;&lt;p&gt;在终端中输入如下命令：&lt;/p&gt;
&lt;u</summary>
      
    
    
    
    <category term="others" scheme="http://example.com/categories/others/"/>
    
    
    <category term="Ubuntu Linux" scheme="http://example.com/tags/Ubuntu-Linux/"/>
    
  </entry>
  
  <entry>
    <title>ros_使用URDF创建机器人</title>
    <link href="http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E4%BD%BF%E7%94%A8URDF%E5%88%9B%E5%BB%BA%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E4%BD%BF%E7%94%A8URDF%E5%88%9B%E5%BB%BA%E6%9C%BA%E5%99%A8%E4%BA%BA/</id>
    <published>2025-09-21T16:00:00.000Z</published>
    <updated>2025-09-22T07:18:07.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用URDF创建机器人"><a href="#使用URDF创建机器人" class="headerlink" title="使用URDF创建机器人"></a>使用URDF创建机器人</h1><p><strong>1.帮机器人创建一个身体</strong></p><ul><li>URDF使用XML来描述机器人的几何结构、传感器和执行器等信息。</li></ul><p>e.g：下述代码定义了一个名为first_robot的机器人，该机器人有一个base_link的部件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用urdf_to_graphviz可以将定义的机器人进行可视化（在urdf目录下进行启动）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;joyning_robot&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 机器人的身体部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;bask_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 部件的外观描述 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 沿着自己几何中心的偏移和旋转量 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 机器人的几何形状 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 设置了一个半径为0.10m,高度为0.5m的圆柱体 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;0.10&quot;</span> <span class="attr">length</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 材质颜色描述 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;white&quot;</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 红、绿、蓝、透明度（半透明） --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 1.0 1.0 0.5&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二个部件：机器人的IMU部件，惯性测量传感器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;imu_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 部件的外观描述 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 沿着自己几何中心的偏移和旋转量 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 机器人的几何形状 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 设置了一个长宽高均为2cm的正方体 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.02 0.02 0.02&quot;</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 材质颜色描述 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 红、绿、蓝、透明度（半透明） --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 0.5&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 机器人的关节，用于组合机器人的部件（例如：本次将把imu固定在机器人的身体上）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;imu_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 表示把imu部件固定在base_link部件上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;bask_link&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;imu_link&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表示固定的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.03&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 旋转轴和限制 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;axis xyz=&quot;0.0 0.0 0.0&quot;/&gt;</span></span><br><span class="line"><span class="comment">        &lt;limit lower=&quot;0.0&quot; upper=&quot;0.0&quot; effort=&quot;0.0&quot; velocity=&quot;0.0&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于joint中的type属性，分别有如下六种类型：</p><ul><li>continuous：一个不受限制的，绕着一根轴的转动副；</li><li>revolute：一个转动角度受限制，绕着一根轴的转动副；</li><li>prismatic：一个沿着一根轴的滑动副，并且有限位；</li><li>fixed：固定关节；</li><li>floating：这个关节允许六个自由度的运动，浮动关节；</li><li>planar：该关节允许在垂直于轴的一个平面内进行平移旋转等动作。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用URDF创建机器人&quot;&gt;&lt;a href=&quot;#使用URDF创建机器人&quot; class=&quot;headerlink&quot; title=&quot;使用URDF创建机器人&quot;&gt;&lt;/a&gt;使用URDF创建机器人&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1.帮机器人创建一个身体&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="simulation" scheme="http://example.com/tags/simulation/"/>
    
  </entry>
  
  <entry>
    <title>ros_使用Xacro简化URDF</title>
    <link href="http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E4%BD%BF%E7%94%A8Xacro%E7%AE%80%E5%8C%96URDF/"/>
    <id>http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E4%BD%BF%E7%94%A8Xacro%E7%AE%80%E5%8C%96URDF/</id>
    <published>2025-09-21T16:00:00.000Z</published>
    <updated>2025-09-22T07:11:45.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Xacro简化URDF"><a href="#使用Xacro简化URDF" class="headerlink" title="使用Xacro简化URDF"></a>使用Xacro简化URDF</h1><ol><li><p>Xacro(XML Macro)是基于XML的宏语言，用于简化URDF文件的创建和维护。使用它可以将部件定义为宏，在需要使用的时候进行调用即可。[宏可以反复调用，但link name不能重复]</p></li><li><p>&lt;xacro:macro name&#x3D;”AAA”&gt;：这个名字主要用于宏定义给参数赋值时使用；params&#x3D;”参数1 参数2 … “：用于定义参数，中间用空格分隔开。</p></li><li><link name="BB">：这个名字主要用于其它声明内部调用，例如joint部件写parent link和child link时使用。</li><li><p>传递参数调用已定义模块：&lt;xacro:模块名称 参数1&#x3D;”xx” 参数2&#x3D;”xx” &#x2F;&gt;。</p></li><li><p><strong>特别注意：</strong>xacro中link name不允许重名，解决办法一般是<strong>将link name也作为参数传入</strong>。</p></li><li><p>xacro文件需要使用命令”xacro 文件绝对路径”转成urdf文件才能使用，可以在launch文件中通过如下命令执行xacro-&gt;urdf的转换(需要安装xacro)。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">substitutions_command_result = launch.substitutions.Command([<span class="string">&#x27;xacro &#x27;</span>,launch.substitutions.LaunchConfiguration(<span class="string">&#x27;model&#x27;</span>)]) </span><br></pre></td></tr></table></figure><p>其中’xacro’后面有一个空格，launch.substitutions.LaunchConfiguration(‘model’)存储的模型文件的路径。</p><p>base_link的Xacro版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span> <span class="attr">name</span>=<span class="string">&quot;MyFirstRobot&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明base_link模块 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意：这里params的参数以空格隔开 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span> <span class="attr">params</span>=<span class="string">&quot;length radius&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;length&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;white&quot;</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 1.0 1.0 0.5&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明imu_link部件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;imu_link&quot;</span> <span class="attr">params</span>=<span class="string">&quot;imu_name xyz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;imu_name&#125;_link&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.02 0.02 0.02&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 1.0 1.0 0.5&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 机器人的关节，用于组合机器人的部件（例如：本次将把imu固定在机器人的身体上）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;imu_name&#125;_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span> <span class="comment">&lt;!--type中的revolute表示可活动的；fixed表示螺丝固定死的，不可以活动的--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表示把imu部件固定在base_link部件上 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;imu_name&#125;_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表示固定的位置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;xyz&#125;&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 旋转轴和限制 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;axis xyz=&quot;0.0 0.0 0.0&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;limit lower=&quot;0.0&quot; upper=&quot;0.0&quot; effort=&quot;0.0&quot; velocity=&quot;0.0&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 给参数赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:base_link</span> <span class="attr">length</span>=<span class="string">&quot;0.12&quot;</span> <span class="attr">radius</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:imu_link</span> <span class="attr">imu_name</span>=<span class="string">&quot;imu_up&quot;</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.03&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:imu_link</span> <span class="attr">imu_name</span>=<span class="string">&quot;imu_down&quot;</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 -0.03&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意：xacro文件需要使用命令&quot;xacro 文件路径&quot;转成urdf文件才能使用 --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用Xacro简化URDF&quot;&gt;&lt;a href=&quot;#使用Xacro简化URDF&quot; class=&quot;headerlink&quot; title=&quot;使用Xacro简化URDF&quot;&gt;&lt;/a&gt;使用Xacro简化URDF&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Xacro(XML Macro)是</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="simulation" scheme="http://example.com/tags/simulation/"/>
    
  </entry>
  
  <entry>
    <title>ros_创建传感器和执行器部件</title>
    <link href="http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E5%88%9B%E5%BB%BA%E4%BC%A0%E6%84%9F%E5%99%A8%E5%92%8C%E6%89%A7%E8%A1%8C%E5%99%A8%E9%83%A8%E4%BB%B6/"/>
    <id>http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E5%88%9B%E5%BB%BA%E4%BC%A0%E6%84%9F%E5%99%A8%E5%92%8C%E6%89%A7%E8%A1%8C%E5%99%A8%E9%83%A8%E4%BB%B6/</id>
    <published>2025-09-21T16:00:00.000Z</published>
    <updated>2025-09-22T07:28:21.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建传感器和执行器部件"><a href="#创建传感器和执行器部件" class="headerlink" title="创建传感器和执行器部件"></a>创建传感器和执行器部件</h1><ol><li><strong>传感器部件的创建</strong></li></ol><ul><li>camera_link</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明camera_link部件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;camera_link&quot;</span> <span class="attr">params</span>=<span class="string">&quot;xyz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;camera_link&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.02 0.10 0.02&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 0.8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 机器人的关节，用于组合机器人的部件（例如：本次将把imu固定在机器人的身体上）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;camera_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span> <span class="comment">&lt;!--type中的revolute表示可活动的；fixed表示螺丝固定死的，不可以活动的--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表示把imu部件固定在base_link部件上 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;camera_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表示固定的位置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;xyz&#125;&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 旋转轴和限制 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;axis xyz=&quot;0.0 0.0 0.0&quot;/&gt;</span></span><br><span class="line"><span class="comment">            &lt;limit lower=&quot;0.0&quot; upper=&quot;0.0&quot; effort=&quot;0.0&quot; velocity=&quot;0.0&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义机器人的照相机部分--&gt;</span></span><br></pre></td></tr></table></figure><ul><li>imu_link</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明imu_link部件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;imu_xacro&quot;</span> <span class="attr">params</span>=<span class="string">&quot;xyz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;imu_link&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;0.02 0.02 0.02&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 1.0 1.0 0.5&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 机器人的关节，用于组合机器人的部件（例如：本次将把imu固定在机器人的身体上）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;imu_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span> <span class="comment">&lt;!--type中的revolute表示可活动的；fixed表示螺丝固定死的，不可以活动的--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表示把imu部件固定在base_link部件上 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;imu_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表示固定的位置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;xyz&#125;&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义机器人的传感器部分--&gt;</span></span><br></pre></td></tr></table></figure><ul><li>laser_link</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明laser_link部件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;laser_link&quot;</span> <span class="attr">params</span>=<span class="string">&quot;xyz&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 雷达支撑管 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;laser_cylinder_link&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;0.01&quot;</span> <span class="attr">length</span>=<span class="string">&quot;0.10&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;green&quot;</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 1.0 0.0 1.0&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;laser_link&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;0.02&quot;</span> <span class="attr">length</span>=<span class="string">&quot;0.02&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 1.0 1.0 0.5&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 机器人的关节，用于组合机器人的部件（例如：本次将把imu固定在机器人的身体上）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;laser_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 将雷达固定到雷达支撑管上 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;laser_cylinder_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;laser_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.05&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;laser_cylinder_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 将雷达支撑管固定到base_link(即机器人)上 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;laser_cylinder_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;xyz&#125;&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义雷达部分 --&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>执行器部件的创建</strong></li></ol><ul><li>caster_link</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明caster部件--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;caster_xacro&quot;</span> <span class="attr">params</span>=<span class="string">&quot;caster_name xyz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;caster_name&#125;_link&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 旋转90度(使用弧度制)，让轮子立起来 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;1.57079 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.016&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 0.0 0.0 0.8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- type=&quot;continuous&quot;表示可转动的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;caster_name&#125;_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span> <span class="comment">&lt;!--type中的revolute表示可活动的；fixed表示螺丝固定死的，不可以活动的--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表示把imu部件固定在base_link部件上 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;caster_name&#125;_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表示固定的位置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;xyz&#125;&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;limit lower=&quot;0.0&quot; upper=&quot;0.0&quot; effort=&quot;0.0&quot; velocity=&quot;0.0&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义执行器部分 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>wheel_link</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明camera_link部件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将wheel_name放入参数中，因为机器人往往不止一个轮子，需要传入参数进行修改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;wheel_xacro&quot;</span> <span class="attr">params</span>=<span class="string">&quot;wheel_name xyz&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加上link_name方便机器人组件中的调用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;wheel_name&#125;_link&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 旋转90度(使用弧度制)，让轮子立起来 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;1.57079 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;0.032&quot;</span> <span class="attr">length</span>=<span class="string">&quot;0.04&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;blue&quot;</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 1.0 0.8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- type=&quot;continuous&quot;表示可转动的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;wheel_name&#125;_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span> <span class="comment">&lt;!--type中的revolute表示可活动的；fixed表示螺丝固定死的，不可以活动的--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表示把imu部件固定在base_link部件上 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;wheel_name&#125;_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表示固定的位置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;xyz&#125;&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 绕y轴旋转 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 1.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;limit lower=&quot;0.0&quot; upper=&quot;0.0&quot; effort=&quot;0.0&quot; velocity=&quot;0.0&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义轮子部分 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>base_xacro</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当本文件作为一个子文件被引入时，不需要为该机器人命名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;robot xmlns:xacro=&quot;http://www.ros.org/wiki/xacro&quot; name=&quot;MyFirstRobot&quot;&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明base_link模块 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意：这里params的参数以空格隔开 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;base_xacro&quot;</span> <span class="attr">params</span>=<span class="string">&quot;length radius&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加一个虚拟部件,到时候以其为基准，能保证整个小车都在base_footprint(即地面)以上--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;length&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;white&quot;</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0 0 0 0.5&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意：定义机器人身体 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将机器人进行组装的文件(相当于main函数)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span> <span class="attr">name</span>=<span class="string">&quot;MyFirstRobot&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- filename = &quot;$&#123;find 功能包名&#125;&quot; ,代码功能：找到功能包的share目录--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 调用base_link部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find robot_description)/urdf/base.urdf.xacro&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 调用传感器部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find robot_description)/urdf/sensor/camera.urdf.xacro&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find robot_description)/urdf/sensor/imu.urdf.xacro&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find robot_description)/urdf/sensor/laser.urdf.xacro&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 执行器部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find robot_description)/urdf/actuatir/wheel.urdf.xacro&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 万象轮部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find robot_description)/urdf/actuatir/caster.urdf.xacro&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用宏，生成机器人的身体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:base_xacro</span> <span class="attr">length</span>=<span class="string">&quot;0.12&quot;</span> <span class="attr">radius</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用宏，生成imu --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:imu_xacro</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.05&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用宏，生成camera,放在机器人最前面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:camera_link</span> <span class="attr">xyz</span>=<span class="string">&quot;0.10 0.0 0.075&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用宏，生成laser --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:laser_link</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.10&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用宏，生成执行器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:wheel_xacro</span> <span class="attr">wheel_name</span>=<span class="string">&quot;right_wheel&quot;</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.1 -0.06&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:wheel_xacro</span> <span class="attr">wheel_name</span>=<span class="string">&quot;left_wheel&quot;</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 -0.1 -0.06&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用宏，生成万象轮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:caster_xacro</span> <span class="attr">caster_name</span>=<span class="string">&quot;front_caster&quot;</span> <span class="attr">xyz</span>=<span class="string">&quot;0.08 0.0 -0.06&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xacro:caster_xacro</span> <span class="attr">caster_name</span>=<span class="string">&quot;rear_caster&quot;</span> <span class="attr">xyz</span>=<span class="string">&quot;-0.08 0.0 -0.06&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>定义每个小部件时，可以不用给name属性赋值，等到最后宏定义组装赋值时再给整个机器人命名。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建传感器和执行器部件&quot;&gt;&lt;a href=&quot;#创建传感器和执行器部件&quot; class=&quot;headerlink&quot; title=&quot;创建传感器和执行器部件&quot;&gt;&lt;/a&gt;创建传感器和执行器部件&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;传感器部件的创建&lt;/strong&gt;&lt;/l</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="simulation" scheme="http://example.com/tags/simulation/"/>
    
  </entry>
  
  <entry>
    <title>ros_在Gazebo中完成机器人仿真</title>
    <link href="http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E5%9C%A8Gazebo%E4%B8%AD%E5%AE%8C%E6%88%90%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BB%BF%E7%9C%9F/"/>
    <id>http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E5%9C%A8Gazebo%E4%B8%AD%E5%AE%8C%E6%88%90%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BB%BF%E7%9C%9F/</id>
    <published>2025-09-21T16:00:00.000Z</published>
    <updated>2025-09-23T00:31:42.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Gazebo中完成机器人仿真"><a href="#在Gazebo中完成机器人仿真" class="headerlink" title="在Gazebo中完成机器人仿真"></a>在Gazebo中完成机器人仿真</h1><ol><li><strong>安装gazebo</strong></li></ol><ul><li>sudo apt install ros-${ROS_DISTRO}-ros-gz：安装对应版本的Gazebo Harmonic。</li><li>安装好后可以通过命令”gz sim”打开软件。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在Gazebo中完成机器人仿真&quot;&gt;&lt;a href=&quot;#在Gazebo中完成机器人仿真&quot; class=&quot;headerlink&quot; title=&quot;在Gazebo中完成机器人仿真&quot;&gt;&lt;/a&gt;在Gazebo中完成机器人仿真&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;安装ga</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="simulation" scheme="http://example.com/tags/simulation/"/>
    
    <category term="gazebo学习" scheme="http://example.com/tags/gazebo%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ros_添加物理属性让机器人更真实</title>
    <link href="http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E6%B7%BB%E5%8A%A0%E7%89%A9%E7%90%86%E5%B1%9E%E6%80%A7%E8%AE%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%9B%B4%E7%9C%9F%E5%AE%9E/"/>
    <id>http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E6%B7%BB%E5%8A%A0%E7%89%A9%E7%90%86%E5%B1%9E%E6%80%A7%E8%AE%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%9B%B4%E7%9C%9F%E5%AE%9E/</id>
    <published>2025-09-21T16:00:00.000Z</published>
    <updated>2025-09-22T09:25:31.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加物理属性让机器人更真实"><a href="#添加物理属性让机器人更真实" class="headerlink" title="添加物理属性让机器人更真实"></a>添加物理属性让机器人更真实</h1><ol><li><strong>碰撞</strong></li></ol><ul><li>在link标签下添加<collision>子标签，其与视觉标签处于同一层次；碰撞包含<origin>和<geometry>两个子标签，<origin>标签描述了碰撞的几何姿态，<geometry>描述了碰撞几何的形状。</li><li>碰撞元素与视觉元素定义形状的方式相同，即用”几何体”标签来定义其形状，格式与视觉元素中的完全相同；</li><li>一般情况下碰撞几何体及其原点与视觉几何体及其原点完全相同。但下面两种情况会出现不同：<strong>第一，需要更快速处理，此时往往会在碰撞元素中用更简单的几何体来代替网络</strong>。第二，<strong>希望限制机器人在敏感设备附近移动。</strong>例如，不想物体与ROS2机器人的头部发生碰撞，则可以将碰撞几何体定义为一个包围该机器人头部的圆柱体。</li><li>添加完collision标签后，打开rviz2，取消”Visual Enable”的勾选，勾选上”Collision Enable”，就可以看到效果了。</li></ul><p>效果图如下：</p><p><img src="/../../../../../AppData/Roaming/Typora/typora-user-images/image-20250922160728722.png" alt="image-20250922160728722"></p><ol start="2"><li><strong>物理属性</strong></li></ol><ul><li>添加了惯性表文件”common_inertia.xacro”，里面有长方体、圆柱体和球体的旋转惯性表的计算公式。</li><li>在link属性下添加如下代码，可以增加其质量和惯性。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:cylinder_inertia</span> <span class="attr">m</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">r</span>=<span class="string">&quot;$&#123;radius&#125;&quot;</span> <span class="attr">h</span>=<span class="string">&quot;$&#123;length&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>增加完后启动rviz2，在RobotModel-&gt;Mass Properties中勾选Mass和Inertia属性，即可以显示出机器人的质量和惯性。</li></ul><p>效果图如下：</p><p><img src="/../../../../../AppData/Roaming/Typora/typora-user-images/image-20250922172122145.png" alt="image-20250922172122145"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;添加物理属性让机器人更真实&quot;&gt;&lt;a href=&quot;#添加物理属性让机器人更真实&quot; class=&quot;headerlink&quot; title=&quot;添加物理属性让机器人更真实&quot;&gt;&lt;/a&gt;添加物理属性让机器人更真实&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;碰撞&lt;/strong&gt;&lt;</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="simulation" scheme="http://example.com/tags/simulation/"/>
    
  </entry>
  
  <entry>
    <title>ros_在RViz中显示机器人</title>
    <link href="http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E5%9C%A8RViz%E4%B8%AD%E6%98%BE%E7%A4%BA%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E5%9C%A8RViz%E4%B8%AD%E6%98%BE%E7%A4%BA%E6%9C%BA%E5%99%A8%E4%BA%BA/</id>
    <published>2025-09-21T16:00:00.000Z</published>
    <updated>2025-09-24T12:45:55.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在RViz中显示机器人"><a href="#在RViz中显示机器人" class="headerlink" title="在RViz中显示机器人"></a>在RViz中显示机器人</h1><ol><li>使用命令rviz2可以打开应用。</li></ol><p><img src="/../../../../../AppData/Roaming/Typora/typora-user-images/image-20250922132351215.png" alt="image-20250922132351215"></p><ol start="2"><li>Fixed_Frame可以调换基准目标。使用”Add”添加”RobotModel”和”TF”模块，可以把机器人模型和坐标轴相关信息输入。</li><li>RViz默认不会加载urdf文件中部件之间的关系(即：joint name开头的标签)，需要安装joint-state-publisher和robot-state-publisher两个模块，然后手动读出urdf中的内容放到启动参数里。</li><li>&#x2F;robot_state_publisher会根据joint的type而选择动态发布&#x2F;tf还是静态发布&#x2F;tf_static给listener，还会发布&#x2F;robot_description给&#x2F;joint_state_publisher。最后&#x2F;joint_state_publisher会返回一个&#x2F;joint_states给&#x2F;robot_state_publisher。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在RViz中显示机器人&quot;&gt;&lt;a href=&quot;#在RViz中显示机器人&quot; class=&quot;headerlink&quot; title=&quot;在RViz中显示机器人&quot;&gt;&lt;/a&gt;在RViz中显示机器人&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;使用命令rviz2可以打开应用。&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="simulation" scheme="http://example.com/tags/simulation/"/>
    
  </entry>
  
  <entry>
    <title>ros_添加虚拟部件让机器人更贴合地面</title>
    <link href="http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E9%83%A8%E4%BB%B6%EF%BC%8C%E8%AE%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%9B%B4%E8%B4%B4%E5%90%88%E5%9C%B0%E9%9D%A2/"/>
    <id>http://example.com/2025/09/22/ros2/%E4%BB%BF%E7%9C%9F/ros_%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E9%83%A8%E4%BB%B6%EF%BC%8C%E8%AE%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%9B%B4%E8%B4%B4%E5%90%88%E5%9C%B0%E9%9D%A2/</id>
    <published>2025-09-21T16:00:00.000Z</published>
    <updated>2025-09-22T07:33:35.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加虚拟部件让机器人更贴合地面"><a href="#添加虚拟部件让机器人更贴合地面" class="headerlink" title="添加虚拟部件让机器人更贴合地面"></a>添加虚拟部件让机器人更贴合地面</h1><ol><li>为了解决把”base_link固定到原点时轮子会陷到地面以下”的问题，使用虚拟部件作为固定点，可以让机器人在地面以上。</li><li>虚拟部件存在link和joint，但是它没有实体。</li></ol><p>在base_link中添加虚拟部件代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当本文件作为一个子文件被引入时，不需要为该机器人命名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;robot xmlns:xacro=&quot;http://www.ros.org/wiki/xacro&quot; name=&quot;MyFirstRobot&quot;&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明base_link模块 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意：这里params的参数以空格隔开 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;base_xacro&quot;</span> <span class="attr">params</span>=<span class="string">&quot;length radius&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加一个虚拟部件,到时候以其为基准，能保证整个小车都在base_footprint(即地面)以上--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;length&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;white&quot;</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1.0 1.0 1.0 0.5&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$joint_name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_footprint&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 $&#123;length/2+0.032-0.001&#125;&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">limit</span> <span class="attr">lower</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">upper</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">effort</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">velocity</span>=<span class="string">&quot;0.0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意：定义机器人身体 --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;添加虚拟部件让机器人更贴合地面&quot;&gt;&lt;a href=&quot;#添加虚拟部件让机器人更贴合地面&quot; class=&quot;headerlink&quot; title=&quot;添加虚拟部件让机器人更贴合地面&quot;&gt;&lt;/a&gt;添加虚拟部件让机器人更贴合地面&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;为了解决把”base_l</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="simulation" scheme="http://example.com/tags/simulation/"/>
    
  </entry>
  
  <entry>
    <title>服务通信介绍</title>
    <link href="http://example.com/2025/09/21/ros2/%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/ros_%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2025/09/21/ros2/%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/ros_%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1%E4%BB%8B%E7%BB%8D/</id>
    <published>2025-09-20T16:00:00.000Z</published>
    <updated>2025-09-24T03:42:29.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务通信介绍"><a href="#服务通信介绍" class="headerlink" title="服务通信介绍"></a>服务通信介绍</h1><ol><li><p>“ros2 service list -t”：查看ros2的服务列表，返回内容具体格式:服务名称 消息接口&#x2F;服务接口类型。</p></li><li><p>“ros2 interface show 消息接口”：查看消息接口具体定义（消息填充）。</p></li><li><p>“ros2 service call 服务名称 消息接口 ‘{消息接口具体填充}’：调用具体服务。</p><p>【注】：消息接口的具体填充，”{参数1: 数值,参数2: 数值,…}”。冒号数值间有一个空格。 </p></li><li><p>可以使用ros2中的可视化工具rqt选取服务。（plugins-&gt;services-&gt;service caller中可以配置）。</p></li><li><p>参数被视为节点的设置，是基于服务通信实现的。</p></li><li><p>“ros2 param list”：查看ros2的参数列表。</p></li><li><p>“ros2 param describe 包名 参数名称”：查看参数的具体信息。</p></li><li><p>“ros2 param get 包名 参数名称”：获得参数的值。</p></li><li><p>“ros2 param set 包名 修改的参数名称 修改数值”：修改参数的值。</p></li><li><p>“ros2 param dump 包名 &gt; 配置文件(.yaml)”：将包现在的参数写入配置文件。</p></li><li><p>“ros2 run 包名 节点名 –ros-args –params-file 配置文件”：运行节点时就根据配置文件将节点配置。</p></li><li><p>&#x3D;&#x3D;<strong>服务通信的特点</strong>&#x3D;&#x3D;</p></li></ol><ul><li>基于客户端&#x2F;服务器(c&#x2F;s)模型</li><li>同步通信机制</li><li>服务器端唯一，客户端可以不唯一</li><li>.srv文件定义请求和应答数据结构</li></ul><p>【补充】：关于.srv文件，需要在package.xml文件中做如下配置：</p><p><img src="/../../../../../AppData/Roaming/Typora/typora-user-images/image-20250923215202803.png" alt="image-20250923215202803"></p><p>在CMakeLists.txt中做如下配置：</p><p><img src="/../../../../../AppData/Roaming/Typora/typora-user-images/image-20250923215408152.png" alt="image-20250923215408152"></p><ol start="13"><li>&#x3D;&#x3D;<strong>创建服务客户端的程序流程</strong>&#x3D;&#x3D;</li></ol><ul><li>编程接口初始化-&gt;创建节点并初始化-&gt;创建客户端对象-&gt;创建并发送请求数据-&gt;等待服务器端应答数据-&gt;销毁节点并关闭接口。</li></ul><ol start="14"><li>&#x3D;&#x3D;<strong>创建服务服务端的程序流程</strong>&#x3D;&#x3D;</li></ol><ul><li>编程接口初始化-&gt;创建节点并初始化-&gt;创建服务端对象-&gt;通过回调函数处进行服务-&gt;向客户端反馈应答结果-&gt;销毁节点并关闭接口。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;服务通信介绍&quot;&gt;&lt;a href=&quot;#服务通信介绍&quot; class=&quot;headerlink&quot; title=&quot;服务通信介绍&quot;&gt;&lt;/a&gt;服务通信介绍&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;“ros2 service list -t”：查看ros2的服务列表，返回内容具体格式:服</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="Service_communication" scheme="http://example.com/tags/Service-communication/"/>
    
  </entry>
  
  <entry>
    <title>ros_C++服务通信实现小海龟巡逻</title>
    <link href="http://example.com/2025/09/21/ros2/%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/ros_C++%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1%E5%AE%9E%E7%8E%B0%E5%B0%8F%E6%B5%B7%E9%BE%9F%E5%B7%A1%E9%80%BB/"/>
    <id>http://example.com/2025/09/21/ros2/%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/ros_C++%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1%E5%AE%9E%E7%8E%B0%E5%B0%8F%E6%B5%B7%E9%BE%9F%E5%B7%A1%E9%80%BB/</id>
    <published>2025-09-20T16:00:00.000Z</published>
    <updated>2025-09-21T12:13:33.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-服务通信实现小海龟巡逻"><a href="#C-服务通信实现小海龟巡逻" class="headerlink" title="C++服务通信实现小海龟巡逻"></a>C++服务通信实现小海龟巡逻</h1><p><strong>需求</strong>：让小海龟在模拟器中随机游走进行巡逻。<br><strong>分析：</strong></p><ul><li>怎么让小海龟动态接收目标点？服务</li><li>用什么接口？自定义的</li><li>随机游走的实现？客户端来产生随机点，请求巡逻服务</li></ul><p><strong>整体框架图：</strong><br>客户端生成目标点，请求巡逻—（服务）–&gt;服务端规划路线，驾驶小海龟到达目标点—（话题）–&gt;小海龟<br>【注】：一般编写程序，可以先把服务端程序完成。</p><p><strong>注意：</strong></p><ul><li>自定义的接口上半部分请求是针对客户端；下半部分响应是针对服务端的。</li><li>srv接口文件对于未赋值变量要求小写，已赋值变量要求大写。【大概率是这样的了】</li><li>创建服务时传入的回调函数一般使用lambda表达式，比较方便。其中lambda表达式传入参数有两请求和响应两部分，</li><li>请求可以设置为const常量，而响应一般还需要进行后续修改故不设置成”const”。</li><li>python中的回调函数需要有返回值，因为python中传入的值是通过拷贝实现的；而c++中的回调函数不需要返回值，因为c++中传入的是指针。</li></ul><p><strong>1.自定义服务接口文件：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">float32 target_x</span><br><span class="line">float32 target_y</span><br><span class="line">---</span><br><span class="line">int8 SUCCESS = 1</span><br><span class="line">int8 FAIL = 0</span><br><span class="line">int8 result # 结果在SUCCESS和FAIL中取其一</span><br></pre></td></tr></table></figure><p>srv文件的上半部分为请求参数，下半部分为响应(返回)参数。</p><p><strong>2.客户端实现步骤：</strong></p><ul><li>创建客户端和定时器;</li><li>定时产生目标点并请求服务端巡逻。</li></ul><p><strong>实现代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chapt4_interfaces/srv/patrol.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将类重命名</span></span><br><span class="line"><span class="keyword">using</span> Patrol = chapt4_interfaces::srv::Patrol;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono_literals; <span class="comment">// 使用命名空间std::chrono_literals[可以使用10s,100ms来表示时间]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TurtleClient</span>: <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 声明定时器</span></span><br><span class="line">    rclcpp::TimerBase::SharedPtr timer_;</span><br><span class="line">    <span class="comment">// 声明客户端</span></span><br><span class="line">    rclcpp::Client&lt;Patrol&gt;::SharedPtr turtle_client;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TurtleClient</span>():<span class="built_in">Node</span>(<span class="string">&quot;turtle_client&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>)); <span class="comment">// 初始化随机种子</span></span><br><span class="line">        <span class="comment">// 创建客户端</span></span><br><span class="line">        turtle_client = <span class="keyword">this</span>-&gt;<span class="built_in">create_client</span>&lt;Patrol&gt;(<span class="string">&quot;Patrol&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建定时器</span></span><br><span class="line">        timer_ = <span class="keyword">this</span>-&gt;<span class="built_in">create_wall_timer</span>(<span class="number">10</span>s, [&amp;]()-&gt;<span class="type">void</span>&#123;</span><br><span class="line">            <span class="comment">// 1.检测服务端是否上线</span></span><br><span class="line">            <span class="keyword">while</span>(!<span class="keyword">this</span>-&gt;turtle_client-&gt;<span class="built_in">wait_for_service</span>(<span class="number">1</span>s))&#123; <span class="comment">// 服务端没有上线</span></span><br><span class="line">                <span class="keyword">if</span>(!rclcpp::<span class="built_in">ok</span>())&#123; <span class="comment">// rclcpp没有准备好</span></span><br><span class="line">                    <span class="built_in">RCLCPP_ERROR</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(),<span class="string">&quot;等待服务上线中,rclcpp挂了&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(),<span class="string">&quot;等待服务上线中&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.构造请求对象</span></span><br><span class="line">            <span class="keyword">auto</span> request = std::<span class="built_in">make_shared</span>&lt;Patrol::Request&gt;();</span><br><span class="line">            request-&gt;target_x = <span class="built_in">rand</span>()%<span class="number">15</span>;</span><br><span class="line">            request-&gt;target_y = <span class="built_in">rand</span>()%<span class="number">15</span>;</span><br><span class="line">            <span class="comment">// 3.发送请求</span></span><br><span class="line">            <span class="comment">// 发送异步请求[请求 回调函数]</span></span><br><span class="line">            <span class="keyword">this</span> -&gt; turtle_client -&gt; <span class="built_in">async_send_request</span>(request, [&amp;](rclcpp::Client&lt;Patrol&gt;::SharedFuture result_future)-&gt;<span class="type">void</span>&#123;</span><br><span class="line">                <span class="keyword">auto</span> response = result_future.<span class="built_in">get</span>();</span><br><span class="line">                <span class="keyword">if</span>(response-&gt;result==Patrol::Response::SUCCESS)&#123;</span><br><span class="line">                    <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(),<span class="string">&quot;请求成功！&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">if</span>(response-&gt;result==Patrol::Response::FAIL)&#123;</span><br><span class="line">                    <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(),<span class="string">&quot;请求失败！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="keyword">auto</span> node = std::<span class="built_in">make_shared</span>&lt;TurtleClient&gt;();</span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.服务端实现步骤：</strong></p><ul><li><p>定义基于Patrol类的服务共享指针、发布者的共享指针、订阅者的共享指针；</p></li><li><p>获取当前位置，并计算新位置发布出去。</p><p><strong>代码实现：</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;geometry_msgs/msg/twist.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;turtlesim/msg/pose.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chapt4_interfaces/srv/patrol.hpp&quot;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">服务端编写：使小海龟到达具体点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将类重命名</span></span><br><span class="line"><span class="keyword">using</span> Patrol = chapt4_interfaces::srv::Patrol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TurtleControlNode</span>: <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    rclcpp::Service&lt;Patrol&gt;::SharedPtr patrol_service; <span class="comment">// 定义基于Patrol类的服务共享指针</span></span><br><span class="line">    rclcpp::Publisher&lt;geometry_msgs::msg::Twist&gt;::SharedPtr publisher_; <span class="comment">//发布者的智能共享指针</span></span><br><span class="line">    rclcpp::Subscription&lt;turtlesim::msg::Pose&gt;::SharedPtr subscriber_; <span class="comment">//订阅者的智能共享指针</span></span><br><span class="line">    <span class="type">double</span> target_x_&#123;<span class="number">1.0</span>&#125;;</span><br><span class="line">    <span class="type">double</span> target_y_&#123;<span class="number">1.0</span>&#125;;</span><br><span class="line">    <span class="type">double</span> k_&#123;<span class="number">1.0</span>&#125;;  <span class="comment">//比例系数【间接控制速度】</span></span><br><span class="line">    <span class="type">double</span> max_speed_&#123;<span class="number">3.0</span>&#125;; <span class="comment">//最大速度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">TurtleControlNode</span><span class="params">(<span class="type">const</span> std::string&amp; node_name)</span>:Node(node_name)</span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line">        publisher_ = <span class="keyword">this</span>-&gt;<span class="built_in">create_publisher</span>&lt;geometry_msgs::msg::Twist&gt;(<span class="string">&quot;/turtle1/cmd_vel&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        subscriber_ = <span class="keyword">this</span>-&gt;<span class="built_in">create_subscription</span>&lt;turtlesim::msg::Pose&gt;(<span class="string">&quot;/turtle1/pose&quot;</span>,<span class="number">10</span>,std::<span class="built_in">bind</span>(&amp;TurtleControlNode::on_pose_received,<span class="keyword">this</span>,</span><br><span class="line">        std::placeholders::_1)); </span><br><span class="line">        <span class="comment">// 服务智能指针的构造[服务名，回调函数(用lambda表达式实现)]</span></span><br><span class="line">        patrol_service = <span class="keyword">this</span>-&gt;<span class="built_in">create_service</span>&lt;Patrol&gt;(<span class="string">&quot;Patrol&quot;</span>,[&amp;](<span class="type">const</span> Patrol::Request::SharedPtr request, Patrol::Response::SharedPtr response)-&gt;<span class="type">void</span>&#123;</span><br><span class="line">            <span class="comment">// 进行请求值合法性判断</span></span><br><span class="line">            <span class="keyword">if</span>((<span class="number">0</span> &lt; request-&gt;target_x &amp;&amp; request-&gt;target_x &lt; <span class="number">12.0</span>)&amp;&amp;(<span class="number">0</span> &lt; request-&gt;target_y &amp;&amp; request-&gt;target_y &lt; <span class="number">12.0</span>))&#123;</span><br><span class="line">                target_x_ = request-&gt;target_x;</span><br><span class="line">                target_y_ = request-&gt;target_y;</span><br><span class="line">                response-&gt;result = Patrol::Response::SUCCESS;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                response-&gt;result = Patrol::Response::FAIL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;); <span class="comment">// 作为服务的参数有两请求和响应两部分</span></span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前位置，并计算新位置发布出去</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pose_received</span><span class="params">(<span class="type">const</span> turtlesim::msg::Pose::SharedPtr pose)</span></span>&#123; <span class="comment">//参数：收到数据的共享指针</span></span><br><span class="line">        <span class="comment">// 1.获取当前位置</span></span><br><span class="line">        <span class="keyword">auto</span> current_x = pose-&gt;x;</span><br><span class="line">        <span class="keyword">auto</span> current_y = pose-&gt;y; </span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="built_in">get_logger</span>(),<span class="string">&quot;获取当前位置:x=%f,y=%f&quot;</span>,current_x,current_y);</span><br><span class="line">        <span class="comment">// 2.计算当前海龟位置跟目标位置之间的距离差和角度差。</span></span><br><span class="line">        <span class="keyword">auto</span> distance = std::<span class="built_in">sqrt</span>((target_x_-current_x)*(target_x_-current_x)+(target_y_-current_y)*(target_y_-current_y));</span><br><span class="line">        <span class="comment">// 目标角度和当前角度的差值</span></span><br><span class="line">        <span class="keyword">auto</span> angle = std::<span class="built_in">atan2</span>((target_y_-current_y),(target_x_-current_x))- pose-&gt;theta;</span><br><span class="line">        <span class="comment">// 3.控制策略</span></span><br><span class="line">        <span class="keyword">auto</span> msg = geometry_msgs::msg::<span class="built_in">Twist</span>();</span><br><span class="line">        <span class="keyword">if</span>(distance&gt;<span class="number">0.1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(angle)&gt;<span class="number">0.2</span>)&#123;</span><br><span class="line">                msg.angular.z = <span class="built_in">fabs</span>(angle);  <span class="comment">//如果角度差大于0.2则改变角度(进行旋转)        </span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                msg.linear.x = k_*distance; <span class="comment">//如果角度差不大，则提高速度</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//限制最大线速度</span></span><br><span class="line">        <span class="keyword">if</span>(msg.linear.x &gt; max_speed_)&#123;</span><br><span class="line">            msg.linear.x = max_speed_;</span><br><span class="line">        &#125;</span><br><span class="line">        publisher_-&gt;<span class="built_in">publish</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="keyword">auto</span> node = std::<span class="built_in">make_shared</span>&lt;TurtleControlNode&gt;(<span class="string">&quot;turtle_control&quot;</span>);</span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还是需要回顾一下发布者（服务端）、订阅者（客户端）和服务的创建（声明就不讲了）。</p><ul><li>发布者的创建：</li></ul><p>create_publisher&lt;模板类&gt;():</p><p>参数列表：服务名称、qos；</p><p>返回值：发布者实例。</p><ul><li>订阅者的创建：</li></ul><p>create_subscription&lt;模板类&gt;():</p><p>参数列表：服务名称（这里应该与对应发布者中的服务名称对应）、qos、回调函数。</p><p>返回值：订阅者实例。</p><ul><li>服务的创建：</li></ul><p>create_service&lt;模板类&gt;():</p><p>参数列表：服务名称、回调函数。</p><p>返回值：服务实例。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-服务通信实现小海龟巡逻&quot;&gt;&lt;a href=&quot;#C-服务通信实现小海龟巡逻&quot; class=&quot;headerlink&quot; title=&quot;C++服务通信实现小海龟巡逻&quot;&gt;&lt;/a&gt;C++服务通信实现小海龟巡逻&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：让小海龟</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="Service_communication" scheme="http://example.com/tags/Service-communication/"/>
    
  </entry>
  
  <entry>
    <title>ros_服务通信实训_人脸识别</title>
    <link href="http://example.com/2025/09/21/ros2/%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/ros_%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1%E5%AE%9E%E8%AE%AD_%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    <id>http://example.com/2025/09/21/ros2/%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/ros_%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1%E5%AE%9E%E8%AE%AD_%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</id>
    <published>2025-09-20T16:00:00.000Z</published>
    <updated>2025-09-21T13:29:51.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务通信实训-人脸识别"><a href="#服务通信实训-人脸识别" class="headerlink" title="服务通信实训_人脸识别"></a>服务通信实训_人脸识别</h1><p><strong>需求</strong>：使用python实现，创建一个人脸检测服务，提供图像，返回人脸数量位置信息。</p><p><strong>难点分析：</strong><br>    人脸怎么识别？使用face_recognition<br>    图片数据和结果怎么传递？使用服务通信<br>    没有合适的消息接口？自定义一个 【分为请求和响应两部分】</p><p><strong>1.自定义服务接口</strong></p><ul><li>消息接口文件命名不要使用”_”，而应该使用<strong>驼峰命名法</strong>；</li><li>“<strong>os.path.join(路径1,路经2)</strong>“：将两个路径拼接起来，会自动加上”&#x2F;“；</li><li>使用”CV BRIDGE”将opencv下图片格式与ROS消息接口中的sensor_msgs&#x2F;Image文件互相转化；</li></ul><p><strong>Facedetectors.srv文件的编写：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sensor_msgs/Image image</span><br><span class="line">---</span><br><span class="line">int16 number</span><br><span class="line">float32 use_time </span><br><span class="line">int32[] top</span><br><span class="line">int32[] right</span><br><span class="line">int32[] bottom</span><br><span class="line">int32[] left</span><br></pre></td></tr></table></figure><p><strong>2.服务实现步骤：</strong></p><ul><li>创建服务，接受请求Request；</li><li>调用face_recognition来识别人脸;</li><li>处理响应结果合成Response返回。</li></ul><p><strong>服务器代码实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rclpy</span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node</span><br><span class="line"><span class="keyword">from</span> chapt4_interfaces.srv <span class="keyword">import</span> Facedetector</span><br><span class="line"><span class="keyword">import</span> cv2 </span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"><span class="keyword">from</span> ament_index_python.packages <span class="keyword">import</span> get_package_share_directory <span class="comment"># 获得功能包share目录绝对路径</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> cv_bridge <span class="keyword">import</span> CvBridge</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">人脸识别服务端</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FaceService</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&#x27;face_service&#x27;</span>)</span><br><span class="line">        <span class="comment"># 创建服务 参数：(服务类型，服务名称，回调函数)</span></span><br><span class="line">        <span class="variable language_">self</span>.service = <span class="variable language_">self</span>.create_service(Facedetector,<span class="string">&#x27;face_detect&#x27;</span>, <span class="variable language_">self</span>.detect_face_callback)</span><br><span class="line">        <span class="variable language_">self</span>.cvbridge = CvBridge() <span class="comment"># 主要用于ROS图像消息和opencv图像之间进行转换</span></span><br><span class="line">        <span class="variable language_">self</span>.declare_parameter(<span class="string">&#x27;upsample_flu&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">        <span class="variable language_">self</span>.declare_parameter(<span class="string">&#x27;model&#x27;</span>,<span class="string">&#x27;hog&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.default_path = os.path.join(get_package_share_directory(<span class="string">&quot;demo_python_service&quot;</span>),<span class="string">&quot;resource/test/.png&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.upsample_flu = <span class="variable language_">self</span>.get_parameter(<span class="string">&#x27;upsample_flu&#x27;</span>).value</span><br><span class="line">        <span class="variable language_">self</span>.model= <span class="variable language_">self</span>.get_parameter(<span class="string">&#x27;model&#x27;</span>).value</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.get_logger().info(<span class="string">&quot;人脸识别！启动！！&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 服务器对用户上传的图片进行处理，以下为逻辑处理代码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">detect_face_callback</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="keyword">if</span>(request.image.data):</span><br><span class="line">            <span class="comment"># 请求中有图像时</span></span><br><span class="line">            cv_img = <span class="variable language_">self</span>.cvbridge.imgmsg_to_cv2(request.image) <span class="comment"># 将消息接口格式的图像文件转化为cv2能识别的图像文件</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 请求中没有图像时</span></span><br><span class="line">            cv_img = cv2.imread(<span class="variable language_">self</span>.default_path)</span><br><span class="line">            <span class="comment"># 此时的cv_img已经是opencv格式的图像了</span></span><br><span class="line">            <span class="variable language_">self</span>.get_logger().info(<span class="string">f&quot;默认图像位置：<span class="subst">&#123;self.default_path&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.get_logger().info(<span class="string">f&quot;并未找到图片，已经加载到默认图像&quot;</span>)</span><br><span class="line"></span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获得人脸位置(即检测人脸)，传入参数(图像，上采样次数，使用模型)【关于上采样，其次数越高，图像精度也越高】 </span></span><br><span class="line">        face_locations = face_recognition.face_locations(cv_img,<span class="variable language_">self</span>.upsample_flu,<span class="variable language_">self</span>.model)</span><br><span class="line">        <span class="comment"># 绘制人脸框</span></span><br><span class="line">        <span class="keyword">for</span> top,bottom,right,left <span class="keyword">in</span> face_locations: <span class="comment"># 这里的top,bottom,right,left就是消息文件里定义的四个消息接口</span></span><br><span class="line">            response.top.append(top)</span><br><span class="line">            response.bottom.append(bottom)</span><br><span class="line">            response.right.append(right)</span><br><span class="line">            response.left.append(left)</span><br><span class="line">        </span><br><span class="line">        response.use_time = time.time()-start_time <span class="comment"># 消息接口里定义的use_time</span></span><br><span class="line">        response.number = <span class="built_in">len</span>(face_locations) <span class="comment">#诶，这里face_locations数组的长度就是人脸的个数</span></span><br><span class="line">        <span class="keyword">return</span> response <span class="comment"># 因为传入的不是指针类型，故需要return一下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    rclpy.init()</span><br><span class="line">    node = FaceService()</span><br><span class="line">    rclpy.spin(node)</span><br><span class="line">    rclpy.shutdown()</span><br></pre></td></tr></table></figure><p><strong>3.客户端实现步骤：</strong></p><ul><li>创建客户端；</li><li>构造Request,发送请求；</li><li>处理返回的Response,绘制人脸显示。</li></ul><p><strong>客户端代码实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rclpy</span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node</span><br><span class="line"><span class="keyword">from</span> chapt4_interfaces.srv <span class="keyword">import</span> Facedetector</span><br><span class="line"><span class="keyword">import</span> cv2 </span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"><span class="keyword">from</span> ament_index_python.packages <span class="keyword">import</span> get_package_share_directory <span class="comment"># 获得功能包share目录绝对路径</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> cv_bridge <span class="keyword">import</span> CvBridge</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FaceClient</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&#x27;face_client&#x27;</span>)</span><br><span class="line">        <span class="comment"># 创建服务 参数：(消息接口，服务名称，回调函数)</span></span><br><span class="line">        <span class="comment"># self.service = self.create_service(Facedetector,&#x27;face_detect&#x27;, self.detect_face_callback)</span></span><br><span class="line">        <span class="variable language_">self</span>.cvbridge = CvBridge()</span><br><span class="line">        <span class="variable language_">self</span>.default_path = os.path.join(get_package_share_directory(<span class="string">&quot;demo_python_service&quot;</span>),<span class="string">&quot;resource/test2.png&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.get_logger().info(<span class="string">&quot;人脸识别客户端！启动！！&quot;</span>)</span><br><span class="line">        <span class="comment"># 创建客户端 参数：(服务类型，服务名称，回调函数)，注意这里传入的服务名称必须要与服务端一致</span></span><br><span class="line">        <span class="variable language_">self</span>.face_client = <span class="variable language_">self</span>.create_client(Facedetector,<span class="string">&#x27;face_detect&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.image = cv2.imread(<span class="variable language_">self</span>.default_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送请求</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_request</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.判断服务端是否上线</span></span><br><span class="line">        <span class="keyword">while</span> <span class="variable language_">self</span>.face_client.wait_for_service(timeout_sec=<span class="number">0.1</span>) <span class="keyword">is</span> <span class="literal">False</span>: <span class="comment"># 每隔0.1s就请求一下服务端</span></span><br><span class="line">            <span class="variable language_">self</span>.get_logger().info(<span class="string">&quot;服务端还未上线，请等待！&quot;</span>)</span><br><span class="line">        <span class="comment"># 2.构造request</span></span><br><span class="line">        request = Facedetector.Request()</span><br><span class="line">        request.image = <span class="variable language_">self</span>.cvbridge.cv2_to_imgmsg(<span class="variable language_">self</span>.image) <span class="comment"># 将opencv格式图像转化为消息接口可接受的图像格式</span></span><br><span class="line">        <span class="comment"># 3.发送请求并等待完成</span></span><br><span class="line">        future = <span class="variable language_">self</span>.face_client.call_async(request) <span class="comment">#(异步获取结果)现在的future中不包含响应结果，需要等待服务端处理完成才会把结果放到future中</span></span><br><span class="line">        <span class="comment"># while not future.done():</span></span><br><span class="line">        <span class="comment">#     time.sleep(1.0) # 休眠当前进程，等待服务处理完成.会造成当前线程无法再接收服务端的返回，这样永远也不会得到future.done()--&gt;True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># self可以相当于自定义类的一个对象</span></span><br><span class="line">        <span class="comment"># rclpy.spin_until_future_complete(self,future) # 一边查看future是否完成，一边接收结果【等待服务端返回响应】</span></span><br><span class="line">        <span class="comment"># 使用回调函数代替上面的方法</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">result_callback</span>(<span class="params">result_future</span>):</span><br><span class="line">            response = result_future.result() <span class="comment"># 获取响应</span></span><br><span class="line">            <span class="variable language_">self</span>.get_logger().info(<span class="string">f&quot;已经收到响应，共收到<span class="subst">&#123;response.number&#125;</span>张人脸，耗时<span class="subst">&#123;response.use_time&#125;</span>秒&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.show_response(response)</span><br><span class="line">        future.add_done_callback(result_callback)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示服务端的响应结果</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_response</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># 绘制人脸</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(response.number):</span><br><span class="line">            top = response.top[i]</span><br><span class="line">            right= response.right[i]</span><br><span class="line">            bottom = response.bottom[i]</span><br><span class="line">            left = response.left[i]</span><br><span class="line">            cv2.rectangle(<span class="variable language_">self</span>.image,(left,top),(right,bottom),(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">5</span>)</span><br><span class="line">        <span class="comment"># 显示图片</span></span><br><span class="line">        cv2.imshow(<span class="string">&#x27;face_result&#x27;</span>,<span class="variable language_">self</span>.image)</span><br><span class="line">        cv2.waitKey(<span class="number">0</span>) <span class="comment"># 也是会阻塞spin的，使其无法正常运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    rclpy.init()</span><br><span class="line">    node = FaceClient()</span><br><span class="line">    node.send_request()</span><br><span class="line">    rclpy.spin(node)</span><br><span class="line">    rclpy.shutdown()</span><br></pre></td></tr></table></figure><p><strong>[注意]：</strong></p><p>​    1.python中不使用”!”取反，而直接使用”is False”or”not”。<br>​    2.发送请求并等待结果的过程处理，不要使用while进行简单处理，最好使用rclpy.spin_until_future_complete(参数) # 一边查看future是否完成，一边接收结果。<br>​    其中参数为调用call_async()返回的结果。<br>​    3.对于解决客户端发送请求响应更好的解决办法，可以采用回调函数（具体见face_client.py）<br>​    即让call_async()返回的结果调用add_done_callback()，里面放入回调函数，回调函数负责获取响应和显示响应。</p><hr><p>一些关于在python的同步代码中调用异步函数：</p><ul><li>当需要在同步函数中调用异步函数时，可以使用”asyncio.get_event_loop()”：来获取当前时间的循环；</li><li>“asyncio.run_coroutine_threadsafe(异步函数，当前时间循环)”：将异步函数包装成一个可调用的线程安全的协程对象；</li><li>“result()”：获取异步函数的返回值。</li></ul><p><strong>示例代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_function</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>) <span class="comment"># 模拟异步操作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello ros2&quot;</span></span><br><span class="line"><span class="comment">#同步函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sync_function</span>():</span><br><span class="line">    loop = asyncio.get_event_loop() <span class="comment"># 获取当前时间循环</span></span><br><span class="line">    future = asyncio.run_coroutine_threadsafe(async_function,loop) <span class="comment"># 将异步函数包装成一个可调用的协程对象</span></span><br><span class="line">    result = future.result()</span><br></pre></td></tr></table></figure><p>但在处理异步函数时，可能会出现异常情况。以下是应对措施：</p><ul><li>常在”asyncio.run_coroutine_threadsafe()”的返回值上调用”add_done_callback(回调函数)”，该回调函数会在异步函数处理完后被调用，可以在里面处理异常。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_function</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>) <span class="comment"># 模拟异步操作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello ros2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#同步函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sync_function</span>():</span><br><span class="line">    loop = asyncio.get_event_loop() <span class="comment"># 获取当前时间循环</span></span><br><span class="line">    future = asyncio.run_coroutine_threadsafe(async_function,loop) <span class="comment"># 将异步函数包装成一个可调用的协程对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">f</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = f.result()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;An Exception  error:<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">     future.add_done_callback(callback)</span><br></pre></td></tr></table></figure><p><strong>[补充]：</strong></p><ol><li><strong>关于python中的异常捕获，常用如下结构：</strong></li></ol><p>try:</p><p>​…</p><p>except Exception as e:</p><p>​…</p><ol start="2"><li><strong>关于C++中的异常捕获，常用如下结构：</strong></li></ol><p>try{</p><p>​…</p><p>}catch(Exception e){</p><p>​…</p><p>}</p><ol start="3"><li>python语言编写项目时，resource下的文件不会由”colcon build”拷贝到install下的share目录中，需要在setup.py文件的data_files中添加。添加语句：**(“share&#x2F;“ + package_name+”&#x2F;resource”,[“文件名”])**。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;服务通信实训-人脸识别&quot;&gt;&lt;a href=&quot;#服务通信实训-人脸识别&quot; class=&quot;headerlink&quot; title=&quot;服务通信实训_人脸识别&quot;&gt;&lt;/a&gt;服务通信实训_人脸识别&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：使用python实现，创建一</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="Service_communication" scheme="http://example.com/tags/Service-communication/"/>
    
  </entry>
  
  <entry>
    <title>ros_TF关系的查询</title>
    <link href="http://example.com/2025/09/21/ros2/%E5%B7%A5%E5%85%B7/ros_TF%E5%85%B3%E7%B3%BB%E7%9A%84%E6%9F%A5%E8%AF%A2/"/>
    <id>http://example.com/2025/09/21/ros2/%E5%B7%A5%E5%85%B7/ros_TF%E5%85%B3%E7%B3%BB%E7%9A%84%E6%9F%A5%E8%AF%A2/</id>
    <published>2025-09-20T16:00:00.000Z</published>
    <updated>2025-09-25T10:26:46.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ros-TF关系的查询"><a href="#ros-TF关系的查询" class="headerlink" title="ros_TF关系的查询"></a>ros_TF关系的查询</h1><p><strong>1.原理：</strong>订阅话题&#x2F;tf &#x2F;tf_static 收集所有坐标系关系，进行计算。</p><p><strong>2.核心代码：</strong><br>    self.buffer_ &#x3D; Buffer()<br>    self.listener_ &#x3D; TransformListener(self.buffer_,self)<br>    self.timer_ &#x3D; self.create_timer(1,self.get_transform)<br>    [注]：其中self.get_transform是自定义的用于实时查询坐标关系的函数（因为可能会查询失败，故使用try…except）。</p><p><strong>3.代码实现：</strong></p><ul><li><strong>（C++版）</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;geometry_msgs/msg/transform_stamped.hpp&quot;</span> <span class="comment">// 消息接口</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2/LinearMath/Quaternion.hpp&quot;</span> <span class="comment">// 提供Quaternion类</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_geometry_msgs/tf2_geometry_msgs.hpp&quot;</span> <span class="comment">// 消息类型转换函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_ros/transform_listener.h&quot;</span> <span class="comment">//坐标监听类</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2_ros/buffer.h&quot;</span> <span class="comment">// 提供buffer</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf2/utils.h&quot;</span> <span class="comment">//提供四元数转欧拉角的函数</span></span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// map到base_link之间的坐标关系</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono_literals;</span><br><span class="line"><span class="keyword">using</span> dynamic_tf = tf2_ros::TransformListener;</span><br><span class="line"><span class="keyword">using</span> bf = tf2_ros::Buffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicTfListener</span> : <span class="keyword">public</span> rclcpp::Node&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;dynamic_tf&gt; listener_; <span class="comment">// 声明一个广播器类的共享指针</span></span><br><span class="line">    rclcpp::TimerBase::SharedPtr timer_;</span><br><span class="line">    std::shared_ptr&lt;bf&gt; buffer_;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DynamicTfListener</span>() : <span class="built_in">Node</span>(<span class="string">&quot;listener_node&quot;</span>)&#123;</span><br><span class="line">        <span class="comment">// 定时获取坐标变换</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;timer_ = <span class="keyword">this</span>-&gt;<span class="built_in">create_wall_timer</span>(<span class="number">1</span>s,std::<span class="built_in">bind</span>(&amp;DynamicTfListener::get_transform,<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">this</span>-&gt;buffer_ = std::<span class="built_in">make_shared</span>&lt;bf&gt;(<span class="keyword">this</span>-&gt;<span class="built_in">get_clock</span>());</span><br><span class="line">        <span class="keyword">this</span>-&gt;listener_= std::<span class="built_in">make_shared</span>&lt;dynamic_tf&gt;(*buffer_, <span class="keyword">this</span>); <span class="comment">// 在dynamic_tf里面创建一个发布者来发布tf_static的话题</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">get_transform</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 到buffer_里查询坐标关系</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 查询坐标关系[从&quot;target_point&quot;到&quot;base_link&quot;]</span></span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> result = buffer_-&gt;<span class="built_in">lookupTransform</span>(<span class="string">&quot;base_link&quot;</span>,<span class="string">&quot;target_point&quot;</span>,</span><br><span class="line">            <span class="keyword">this</span>-&gt;<span class="built_in">get_clock</span>()-&gt;<span class="built_in">now</span>(),rclcpp::Duration::<span class="built_in">from_seconds</span>(<span class="number">2.0f</span>));</span><br><span class="line">            <span class="comment">// 获取查询结果</span></span><br><span class="line">            <span class="keyword">auto</span> transform = result.transform.translation;</span><br><span class="line">            <span class="keyword">auto</span> rotation = result.transform.rotation; <span class="comment">// 这个rotation是四元数格式</span></span><br><span class="line">            <span class="type">double</span> y, p, r;</span><br><span class="line">            tf2::<span class="built_in">getEulerYPR</span>(rotation, y, p, r);</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="built_in">get_logger</span>(),<span class="string">&quot;平移:%f,%f,%f&quot;</span>,transform.x, transform.y, transform.z);</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="built_in">get_logger</span>(),<span class="string">&quot;旋转:y:%f,p:%f,r:%f&quot;</span>, y, p, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">catch</span>(<span class="type">const</span> std::exception&amp; e)&#123;</span><br><span class="line">            <span class="built_in">RCLCPP_WARN</span>(<span class="built_in">get_logger</span>(),<span class="string">&quot;%s&quot;</span>,e.<span class="built_in">what</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc,argv);</span><br><span class="line">    <span class="keyword">auto</span> stb = std::<span class="built_in">make_shared</span>&lt;DynamicTfListener&gt;();</span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(stb);</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>python版</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rclpy</span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> TransformStamped <span class="comment">#消息接口</span></span><br><span class="line"><span class="keyword">from</span> tf2_ros <span class="keyword">import</span> TransformListener,Buffer <span class="comment">#坐标监听器</span></span><br><span class="line"><span class="keyword">from</span> tf_transformations <span class="keyword">import</span> euler_from_quaternion<span class="comment"># 四元数转欧拉坐标</span></span><br><span class="line"><span class="keyword">import</span> math <span class="comment"># 有角度转弧度函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TfListener</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&#x27;dynamic_listener&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.buffer_ = Buffer() <span class="comment"># 创建保存坐标变换信息的缓冲区</span></span><br><span class="line">        <span class="variable language_">self</span>.listener_ = TransformListener(<span class="variable language_">self</span>.buffer_,<span class="variable language_">self</span>) <span class="comment"># 创建坐标变换的监听器</span></span><br><span class="line">        <span class="variable language_">self</span>.timer_ = <span class="variable language_">self</span>.create_timer(<span class="number">1</span>,<span class="variable language_">self</span>.get_tf) <span class="comment"># 创建一个固定周期的定时器，处理坐标信息</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_tf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 实时查询坐标关系</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = <span class="variable language_">self</span>.buffer_.lookup_transform(<span class="string">&#x27;base_link&#x27;</span>,<span class="string">&#x27;bottle_link&#x27;</span>,rclpy.time.Time(seconds=<span class="number">0.0</span>),rclpy.time.Duration(seconds=<span class="number">5.0</span>))<span class="comment">#查询5s最新情况的坐标关系（这里的两个坐标系名可以作为参数传入）参数：[目标坐标系，源坐标系，当前时间]</span></span><br><span class="line">            transform = result.transform</span><br><span class="line">            <span class="variable language_">self</span>.get_logger().info(<span class="string">f&quot;平移:<span class="subst">&#123;transform.translation&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.get_logger().info(<span class="string">f&quot;旋转：<span class="subst">&#123;transform.rotation&#125;</span>&quot;</span>) <span class="comment"># 四元数形式</span></span><br><span class="line">            rotation_eular = euler_from_quaternion([transform.rotation.x,</span><br><span class="line">            transform.rotation.y,transform.rotation.z,transform.rotation.w])</span><br><span class="line">            <span class="variable language_">self</span>.get_logger().info(<span class="string">f&quot;旋转RPY:<span class="subst">&#123;rotation_eular&#125;</span>&quot;</span>) <span class="comment"># 欧拉角形式</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="variable language_">self</span>.get_logger().warn(<span class="string">f&quot;获取坐标变换失败，原因<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    rclpy.init()</span><br><span class="line">    node = TfListener()</span><br><span class="line">    rclpy.spin(node)</span><br><span class="line">    rclpy.shutdown()</span><br></pre></td></tr></table></figure><p>关于geometry_msgs.msg中Twist类(小海龟速度控制)的一些解读参考： <a href="https://www.cswamp.com/post/201">https://www.cswamp.com/post/201</a></p><p>turtlesim.msg中的Pose类：管理小海龟位置消息</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ros-TF关系的查询&quot;&gt;&lt;a href=&quot;#ros-TF关系的查询&quot; class=&quot;headerlink&quot; title=&quot;ros_TF关系的查询&quot;&gt;&lt;/a&gt;ros_TF关系的查询&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1.原理：&lt;/strong&gt;订阅话题&amp;#x2F;tf</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="tools" scheme="http://example.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>ros_TF相关命令及原理探究</title>
    <link href="http://example.com/2025/09/21/ros2/%E5%B7%A5%E5%85%B7/ros_TF%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/"/>
    <id>http://example.com/2025/09/21/ros2/%E5%B7%A5%E5%85%B7/ros_TF%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/</id>
    <published>2025-09-20T16:00:00.000Z</published>
    <updated>2025-09-21T12:49:17.248Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ros-TF相关命令及原理探究"><a href="#ros-TF相关命令及原理探究" class="headerlink" title="ros_TF相关命令及原理探究"></a>ros_TF相关命令及原理探究</h1><p>以下均是终端内输入的命令</p><p><strong>1.TF工具的简单介绍</strong></p><ul><li>通过命令行使用TF：（e.g）</li></ul><p>发布base_link到base_laser之间的变换:ros2 run tf2_ros static_transform_publisher –x 值 –y 值 -z 值</p><p> –roll 值 –pitch 值 –yaw 值 –frame-id id值 –child-frame-id id值。</p><p>​    **[注]**：roll:翻滚 pitch:俯仰 yaw:偏航</p><p>发布base_laser到wall_point之间的变换:ros2 run2 tf2_ros static_transform_publisher –x 值 –y 值 -z 值<br>–roll 值 –pitch 值 –yaw 值 –frame-id id值 –child-frame-id id值。</p><p>查询base_link到wall_point之间的关系：ros2 run tf2_ros tf2_echo id值1 id值2。</p><ul><li>“3d-rotation-converter”：可以对坐标变化过程进行可视化。</li><li>“ros2 run tf2_tools view_frames”:查看TF树。</li></ul><p><strong>2. TF原理探究</strong></p><ul><li>ros2 topic list -t：查询话题及其对应接口。</li><li>ros2 interface show 接口：接口详细填充展示。</li><li>static_transform_publisher适合于查询雷达这种固定物件相较于机器人的位置关系。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ros-TF相关命令及原理探究&quot;&gt;&lt;a href=&quot;#ros-TF相关命令及原理探究&quot; class=&quot;headerlink&quot; title=&quot;ros_TF相关命令及原理探究&quot;&gt;&lt;/a&gt;ros_TF相关命令及原理探究&lt;/h1&gt;&lt;p&gt;以下均是终端内输入的命令&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="tools" scheme="http://example.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>ros_使用launch启动多个节点（基础版）</title>
    <link href="http://example.com/2025/09/21/ros2/%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/ros_%E4%BD%BF%E7%94%A8launch%E5%90%AF%E5%8A%A8%E5%A4%9A%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <id>http://example.com/2025/09/21/ros2/%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/ros_%E4%BD%BF%E7%94%A8launch%E5%90%AF%E5%8A%A8%E5%A4%9A%E4%B8%AA%E8%8A%82%E7%82%B9/</id>
    <published>2025-09-20T16:00:00.000Z</published>
    <updated>2025-09-25T03:31:51.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用launch启动多个节点"><a href="#使用launch启动多个节点" class="headerlink" title="使用launch启动多个节点"></a>使用launch启动多个节点</h1><p><strong>1.使用launch启动多个节点：</strong></p><ul><li>“generate_launch_description()”：产生launch描述【注意该函数名字是固定的】；其返回值也是固定的，返回actions动作(是一个数组)。</li><li><strong>关于c++版本将launch文件写到install&#x2F;lib下，使用”install(DIRECTORY launch DESTINATION share&#x2F;${PROJECT_NAME})”。</strong>【更方便】</li><li><strong>关于python版本将launch文件写到install&#x2F;lib下，使用” ‘share&#x2F;‘+package_name+’&#x2F;launch’,glob(‘launch&#x2F;*.launch.py’)”<br> [注意]：上述操作需要引入globe包[from glob import glob]。</strong></li><li>python中的glob函数：用于查找符合特定规则的文件，需要传入指定匹配的路径字符串，返回值为当前目录下满足条件的文件(不包含子目录下的)。</li><li><strong>launch脚本的启动，”ros2 launch 包名 launch文件名”。</strong></li><li>“source 路径”：将路径加入到系统环境变量中，相当于激活该区域。</li></ul><p><strong>2.使用launch传递参数：</strong></p><ul><li>声明一个launch参数：launch.actions.DeclareLaunchArgument(‘参数名字’,default_value&#x3D;”默认参数值”,(可选)description&#x3D;”给该参数一个备注”)</li><li>把launch的参数手动传给某节点：<br>    “launch.substitutions.LaunchConfiguration(‘参数名称’,”默认参数值”)”:对参数值进行替换。<br>    在需要传入参数的节点处添加属性parameters&#x3D;[{节点参数名:launch.substitutions.LaunchConfiguration(‘参数名称’,default&#x3D;”默认参数值”)}]。<br>3.运行的时候可以使用：ros2 launch 包名 launch文件名 自定义参数名:&#x3D;参数值。</li></ul><p><strong>3.launch三大组件</strong>(4.6.3)<br>    动作：一个节点、一句打印、一段终端指令、另一个终端文件等<br>    替换：使用launch的参数替换节点的参数值(未学)<br>    条件：可以决定哪些节点启动，哪些不启动，相当于if(未学)</p><p><strong>代码实例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> launch</span><br><span class="line"><span class="keyword">import</span> launch_ros</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_launch_description</span>():</span><br><span class="line">    <span class="comment"># 生成launch描述【注意该函数名字是固定的】</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.声明一个launch函数</span></span><br><span class="line">    action_declare_arg_background_g = launch.actions.DeclareLaunchArgument(<span class="string">&#x27;bg_param&#x27;</span>, default_value=<span class="string">&quot;150&quot;</span>)</span><br><span class="line">   </span><br><span class="line">    action_node_turtle_client = launch_ros.actions.Node( <span class="comment"># 传入包，可执行文件和日志输出的位置</span></span><br><span class="line">        package = <span class="string">&#x27;demo_cpp_service&#x27;</span>,</span><br><span class="line">        executable = <span class="string">&#x27;turtle_client&#x27;</span>,</span><br><span class="line">        output = <span class="string">&#x27;screen&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    action_node_turtle_control = launch_ros.actions.Node( <span class="comment"># 传入包，可执行文件和日志输出的位置</span></span><br><span class="line">        package = <span class="string">&#x27;demo_cpp_service&#x27;</span>,</span><br><span class="line">        executable = <span class="string">&#x27;turtle_control&#x27;</span>,</span><br><span class="line">        output = <span class="string">&#x27;screen&#x27;</span></span><br><span class="line">     )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.把launch的参数手动传递给某个参数</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;产生launch描述&#x27;&#x27;&#x27;</span></span><br><span class="line">    action_node_turtle_node = launch_ros.actions.Node( <span class="comment"># 传入包，可执行文件和日志输出的位置</span></span><br><span class="line">        package = <span class="string">&#x27;turtlesim&#x27;</span>,</span><br><span class="line">        executable = <span class="string">&#x27;turtlesim_node&#x27;</span>,</span><br><span class="line">        parameters =[&#123;<span class="string">&#x27;background_g&#x27;</span>:launch.substitutions.LaunchConfiguration(<span class="string">&#x27;bg_param&#x27;</span>,default=<span class="string">&quot;150&quot;</span>)&#125;],</span><br><span class="line">        output = <span class="string">&#x27;screen&#x27;</span>,</span><br><span class="line">     )</span><br><span class="line">    <span class="keyword">return</span> launch.LaunchDescription([</span><br><span class="line">        action_node_turtle_client,</span><br><span class="line">        action_node_turtle_control,</span><br><span class="line">        action_node_turtle_node,</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p>【补充】：</p><ul><li>DeclareLaunchArgument(参数名称,default_name&#x3D;”默认取值”,description&#x3D;”参数的描述”)：声明launch文件可以修改的参数。【声明一个参数】</li><li>LaunchConfiguration(“在DeclareLaunchArgument中声明过的动态参数名称”)：在启动文件中用于动态配置参数、节点选项等的一种机制。可以在运行或者启动文件时灵活调整参数。一般与”DeclareLaunchArgument()”配套使用。【引用一个参数】</li></ul><p><strong>启动两个小海龟模拟器的例子：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> launch</span><br><span class="line"><span class="keyword">import</span> launch_ros</span><br><span class="line"><span class="keyword">from</span> ament_index_python.packages <span class="keyword">import</span> get_package_share_directory</span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">太诡异了这个代码OTZ</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_launch_description</span>(): </span><br><span class="line">    <span class="comment"># 这个动作实际上就是启动两个小海龟模拟器</span></span><br><span class="line">    <span class="comment"># 动作1：启动其它launch</span></span><br><span class="line">    action_launch_path = [get_package_share_directory(<span class="string">&#x27;turtlesim&#x27;</span>),<span class="string">&#x27;/launch/&#x27;</span>,<span class="string">&#x27;multisim.launch.py&#x27;</span>]</span><br><span class="line">    <span class="comment"># 因为该launch文件在不同场景均需要启动，故可将其包含到不同的父launch文件中。</span></span><br><span class="line">    action_include_launch = launch.actions.IncludeLaunchDescription(launch.launch_description_sources.PythonLaunchDescriptionSource(action_launch_path))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 动作2：打印这个路径</span></span><br><span class="line">    action_launch_info = launch.actions.LogInfo(msg=<span class="built_in">str</span>(action_launch_path))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 动作3：执行进程，即执行一个命令行</span></span><br><span class="line">    action_topic_list = launch.actions.ExecuteProcess(cmd=[<span class="string">&#x27;ros2&#x27;</span>,<span class="string">&#x27;topic&#x27;</span>,<span class="string">&#x27;list&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 动作4：组织动作成组，把多个动作放一个组</span></span><br><span class="line">    action_group = launch.actions.GroupAction([</span><br><span class="line">        <span class="comment"># 动作5：定时器</span></span><br><span class="line">        launch.actions.TimerAction(period=<span class="number">2.0</span>,actions=[action_include_launch]),</span><br><span class="line">        launch.actions.TimerAction(period=<span class="number">4.0</span>,actions=[action_topic_list])</span><br><span class="line">    ])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> launch.LaunchDescription([</span><br><span class="line">        <span class="comment"># 执行顺序：打印路径--&gt;(执行动作组中的)启动两个小海龟模拟器--&gt;(执行动作组中的)执行一个命令行</span></span><br><span class="line">        action_launch_info,</span><br><span class="line">        action_group</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p>IncludeLaunchDescription()：</p><ul><li>主要作用是包含其他Launch文件。</li><li>它是一个动作(launch.actions模块中的类)。</li></ul><p>PythonLaunchDescriptionSource()：</p><ul><li>是IncludeLaunchDescription()一个来源类，它指定所包含的launch文件是python格式的。</li><li>其它来源还包括XML和YAML格式。</li></ul><p>上述两个函数一般结合使用：IncludeLaunchDescription(PythonLaunchDescriptionSource(…))，其应用场景有：</p><ul><li>模块化启动：在大型项目中，可将不同功能节点拆分到多个launch文件中。使用IncludeLaunchDescription()将这些launch文件组合在一起。</li><li>复用已有launch文件：若某个launch文件在多个场景中均需要启动，可以将其包含在不同的父launch文件中。</li><li>传递函数：父launch文件通过launch_argument传递给子launch文件。</li></ul><ol start="4"><li>在配置文件中添加如下代码并运行colcon build可以将文件夹拷贝到install目录下。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install(DIRECTORY launch urdf config DESTINATION share/$&#123;PROJECT_NAME&#125;)</span><br></pre></td></tr></table></figure><p>launch、urdf、config均为功能包下的文件夹。</p><ol start="5"><li>只要节点可以通过”ros2 run 功能包 节点”运行的，就可以放在launch_ros.actions.Node()中进行launch批量运行。</li></ol><p>【注】：</p><p>&#x3D;&#x3D;<strong>Node常用参数：</strong>&#x3D;&#x3D;</p><ul><li><strong>package</strong>(str)：包含节点的包名</li><li><strong>executable</strong>(str)：可执行节点的名称</li><li>name(str)：节点名【用于覆盖默认节点名，默认为空】(ROS中不允许节点名相同)</li><li>namespace(str)：节点的命名空间【默认为空，设置后会影响节点的话题、服务等前缀】</li><li>output(str)：节点输出位置【screen&#x2F;log】</li><li><strong>parameters</strong>(list)：传递参数给节点【可以是字典或YAML文件路径列表】</li><li>remappings(list)：话题、服务或参数的重映射。格式为列表，元素是元组：(‘旧名称’，’新名称’)</li><li><strong>arguments</strong>(list)：额外的命令行参数，通常用于–ros-args传递日志级别等配置。[‘操作’,操作值]</li></ul><ol start="6"><li>关于launch_ros.actions.Node()中的参数parameters和arguments，parameters是将参数传递给节点的参数，即运行命令”ros2 run rviz2 rviz2 –ros-args -p xx&#x3D;xxxvalue”；而arguments传递参数其实是在命令行后面加东西，即相当于命令”ros2 run rviz2 rviz2 -d 需要加载的文件路径”。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用launch启动多个节点&quot;&gt;&lt;a href=&quot;#使用launch启动多个节点&quot; class=&quot;headerlink&quot; title=&quot;使用launch启动多个节点&quot;&gt;&lt;/a&gt;使用launch启动多个节点&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1.使用launch启动多个</summary>
      
    
    
    
    <category term="ROS2" scheme="http://example.com/categories/ROS2/"/>
    
    
    <category term="ROS2" scheme="http://example.com/tags/ROS2/"/>
    
    <category term="Service_communication" scheme="http://example.com/tags/Service-communication/"/>
    
  </entry>
  
</feed>
